// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"class BinaryTree$node {
  private static _: any;
  static type = \\"BinaryTree\\" as const;
  static prop = \\"node\\" as const;
  static f = BinaryTree$node;
}
class BinaryTree$left {
  private static _: any;
  static type = \\"BinaryTree\\" as const;
  static prop = \\"left\\" as const;
  static f = BinaryTree$left;
}
class BinaryTree$right {
  private static _: any;
  static type = \\"BinaryTree\\" as const;
  static prop = \\"right\\" as const;
  static f = BinaryTree$right;
}
class DeepOnly$a {
  private static _: any;
  static type = \\"DeepOnly\\" as const;
  static prop = \\"a\\" as const;
  static f = DeepOnly$a;
}
class DeepOnly$b {
  private static _: any;
  static type = \\"DeepOnly\\" as const;
  static prop = \\"b\\" as const;
  static f = DeepOnly$b;
}
class Recursive$id {
  private static _: any;
  static type = \\"Recursive\\" as const;
  static prop = \\"id\\" as const;
  static f = Recursive$id;
}
class Recursive$next {
  private static _: any;
  static type = \\"Recursive\\" as const;
  static prop = \\"next\\" as const;
  static f = Recursive$next;
}
class ShallowOnly$a {
  private static _: any;
  static type = \\"ShallowOnly\\" as const;
  static prop = \\"a\\" as const;
  static f = ShallowOnly$a;
}
class ShallowOnly$b {
  private static _: any;
  static type = \\"ShallowOnly\\" as const;
  static prop = \\"b\\" as const;
  static f = ShallowOnly$b;
}

export type BinaryTree$ =
  | typeof BinaryTree$node
  | $<typeof BinaryTree$left, BinaryTree$>
  | $<typeof BinaryTree$right, BinaryTree$>

export type DeepOnly$ =
  | $<typeof DeepOnly$a, ShallowOnly$>
  | $<typeof DeepOnly$b, ShallowOnly$>

export type Recursive$ =
  | typeof Recursive$id
  | $<typeof Recursive$next, Recursive$>

export type ShallowOnly$ =
  | typeof ShallowOnly$a
  | typeof ShallowOnly$b


export type $_ =
  | BinaryTree$
  | DeepOnly$
  | Recursive$
  | ShallowOnly$

const _BinaryTree = {
  node: BinaryTree$node,
};

export const BinaryTree: typeof _BinaryTree & {
  left: $$MapWrap<typeof$BinaryTree, typeof BinaryTree$left>,
  right: $$MapWrap<typeof$BinaryTree, typeof BinaryTree$right>,
} = {
  ..._BinaryTree,
  left: $$mapWrap(() => BinaryTree, BinaryTree$left),
  right: $$mapWrap(() => BinaryTree, BinaryTree$right),
};

type typeof$BinaryTree = typeof BinaryTree

export const DeepOnly: {
  a: $$MapWrap<typeof$ShallowOnly, typeof DeepOnly$a>,
  b: $$MapWrap<typeof$ShallowOnly, typeof DeepOnly$b>,
} = {
  a: $$mapWrap(() => ShallowOnly, DeepOnly$a),
  b: $$mapWrap(() => ShallowOnly, DeepOnly$b),
};

type typeof$DeepOnly = typeof DeepOnly

const _Recursive = {
  id: Recursive$id,
};

export const Recursive: typeof _Recursive & {
  next: $$MapWrap<typeof$Recursive, typeof Recursive$next>,
} = {
  ..._Recursive,
  next: $$mapWrap(() => Recursive, Recursive$next),
};

type typeof$Recursive = typeof Recursive

export const ShallowOnly = {
  a: ShallowOnly$a,
  b: ShallowOnly$b,
};

type typeof$ShallowOnly = typeof ShallowOnly

interface __$BinaryTree<F extends BinaryTree$> {
  node: String,
  left: (_$BinaryTree<Extract<F, $<typeof BinaryTree$left, BinaryTree$>>[\\"l\\"]> | null),
  right: (_$BinaryTree<Extract<F, $<typeof BinaryTree$right, BinaryTree$>>[\\"l\\"]> | null),
}
type _$BinaryTree<F extends BinaryTree$> = Pick<__$BinaryTree<F>, F[\\"f\\"][\\"prop\\"]>;
export type $BinaryTree<F extends $$DeepArray<BinaryTree$>> = _$BinaryTree<$$UnwrapDeepArray<F>>

interface __$DeepOnly<F extends DeepOnly$> {
  a: _$ShallowOnly<Extract<F, $<typeof DeepOnly$a, ShallowOnly$>>[\\"l\\"]>,
  b: (_$ShallowOnly<Extract<F, $<typeof DeepOnly$b, ShallowOnly$>>[\\"l\\"]> | null)[],
}
type _$DeepOnly<F extends DeepOnly$> = Pick<__$DeepOnly<F>, F[\\"f\\"][\\"prop\\"]>;
export type $DeepOnly<F extends $$DeepArray<DeepOnly$>> = _$DeepOnly<$$UnwrapDeepArray<F>>

interface __$Recursive<F extends Recursive$> {
  id: ID,
  next: _$Recursive<Extract<F, $<typeof Recursive$next, Recursive$>>[\\"l\\"]>,
}
type _$Recursive<F extends Recursive$> = Pick<__$Recursive<F>, F[\\"f\\"][\\"prop\\"]>;
export type $Recursive<F extends $$DeepArray<Recursive$>> = _$Recursive<$$UnwrapDeepArray<F>>

interface __$ShallowOnly<F extends ShallowOnly$> {
  a: String,
  b: Number,
}
type _$ShallowOnly<F extends ShallowOnly$> = Pick<__$ShallowOnly<F>, F[\\"f\\"][\\"prop\\"]>;
export type $ShallowOnly<F extends $$DeepArray<ShallowOnly$>> = _$ShallowOnly<$$UnwrapDeepArray<F>>"
`;
