// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"export type $$ObjectType = (
  | \\"BinaryTree\\"
  | \\"DeepOnly\\"
  | \\"Query\\"
  | \\"Recursive\\"
  | \\"ShallowOnly\\"
)

export const $$objectTypeInfoMap = {
  BinaryTree: new $$ObjectTypeInfo(
    {
      BinaryTree$node: \\"node\\",
    },
    {
      node: \\"BinaryTree$node\\",
    },
    null as any as {
      BinaryTree$node: \\"String\\",
    },
    null as any as {
      BinaryTree$node: $$Identity,
    },
    {
      BinaryTree$left: \\"left\\",
      BinaryTree$right: \\"right\\",
    },
    {
      left: \\"BinaryTree$left\\",
      right: \\"BinaryTree$right\\",
    },
    null as any as {
      BinaryTree$left: \\"BinaryTree\\",
      BinaryTree$right: \\"BinaryTree\\",
    },
    null as any as {
      BinaryTree$left: $$Optional<$$Identity>,
      BinaryTree$right: $$Optional<$$Identity>,
    },
    null as any as {
      BinaryTree$left: {},
      BinaryTree$node: {},
      BinaryTree$right: {},
    },
    {
      BinaryTree$left: {},
      BinaryTree$node: {},
      BinaryTree$right: {},
    },
    {
      BinaryTree$left: {},
      BinaryTree$node: {},
      BinaryTree$right: {},
    },
    {
      BinaryTree$left: \\"GraphQL request\\",
      BinaryTree$node: \\"GraphQL request\\",
      BinaryTree$right: \\"GraphQL request\\",
    } as const,
  ),
  DeepOnly: new $$ObjectTypeInfo(
    {}, {}, {}, {},
    {
      DeepOnly$a: \\"a\\",
      DeepOnly$b: \\"b\\",
    },
    {
      a: \\"DeepOnly$a\\",
      b: \\"DeepOnly$b\\",
    },
    null as any as {
      DeepOnly$a: \\"ShallowOnly\\",
      DeepOnly$b: \\"ShallowOnly\\",
    },
    null as any as {
      DeepOnly$a: $$Identity,
      DeepOnly$b: $$Array<$$Optional<$$Identity>>,
    },
    null as any as {
      DeepOnly$a: {},
      DeepOnly$b: {},
    },
    {
      DeepOnly$a: {},
      DeepOnly$b: {},
    },
    {
      DeepOnly$a: {},
      DeepOnly$b: {},
    },
    {
      DeepOnly$a: \\"GraphQL request\\",
      DeepOnly$b: \\"GraphQL request\\",
    } as const,
  ),
  Query: new $$ObjectTypeInfo(
    {
      Query$oneDirective: \\"oneDirective\\",
    },
    {
      oneDirective: \\"Query$oneDirective\\",
    },
    null as any as {
      Query$oneDirective: \\"String\\",
    },
    null as any as {
      Query$oneDirective: $$Optional<$$Identity>,
    },
    {
      Query$multDirectivesArgs: \\"multDirectivesArgs\\",
      Query$multDirectivesNoArgs: \\"multDirectivesNoArgs\\",
      Query$multDirectivesNullArgs: \\"multDirectivesNullArgs\\",
      Query$noDirectives: \\"noDirectives\\",
    },
    {
      multDirectivesArgs: \\"Query$multDirectivesArgs\\",
      multDirectivesNoArgs: \\"Query$multDirectivesNoArgs\\",
      multDirectivesNullArgs: \\"Query$multDirectivesNullArgs\\",
      noDirectives: \\"Query$noDirectives\\",
    },
    null as any as {
      Query$multDirectivesArgs: \\"BinaryTree\\",
      Query$multDirectivesNoArgs: \\"ShallowOnly\\",
      Query$multDirectivesNullArgs: \\"DeepOnly\\",
      Query$noDirectives: \\"Recursive\\",
    },
    null as any as {
      Query$multDirectivesArgs: $$Identity,
      Query$multDirectivesNoArgs: $$Optional<$$Identity>,
      Query$multDirectivesNullArgs: $$Identity,
      Query$noDirectives: $$Array<$$Identity>,
    },
    null as any as {
      Query$multDirectivesArgs: {},
      Query$multDirectivesNoArgs: {},
      Query$multDirectivesNullArgs: {},
      Query$noDirectives: {},
      Query$oneDirective: {},
    },
    {
      Query$multDirectivesArgs: {},
      Query$multDirectivesNoArgs: {},
      Query$multDirectivesNullArgs: {},
      Query$noDirectives: {},
      Query$oneDirective: {},
    },
    {
      Query$multDirectivesArgs: {
        scalarArg: {
          a: \\"test\\",
          b: 12345,
        },
        inputArg: {
          a: {
            x: 5,
            y: [
              1,
              2,
              3,
            ],
            z: {
              x: 5,
            },
          },
        },
        scalarArrArg: {
          a: [
            \\"a\\",
            \\"b\\",
            \\"c\\",
            null,
          ],
        },
        inputArrArg: {
          a: [
            {
              x: 5,
            },
            {
              x: 6,
            },
            {
              y: [
                1,
                2,
                3,
              ],
            },
          ],
        },
      },
      Query$multDirectivesNoArgs: {
        noArgs: {},
        scalarArg: {},
        inputArg: {},
        scalarArrArg: {},
        inputArrArg: {},
      },
      Query$multDirectivesNullArgs: {
        scalarArg: {
          a: null,
          b: null,
        },
        inputArg: {
          a: null,
        },
        scalarArrArg: {
          a: null,
        },
        inputArrArg: {
          a: null,
        },
      },
      Query$noDirectives: {},
      Query$oneDirective: {
        scalarArg: {
          x: \\"string\\",
        },
      },
    },
    {
      Query$multDirectivesArgs: \\"GraphQL request\\",
      Query$multDirectivesNoArgs: \\"GraphQL request\\",
      Query$multDirectivesNullArgs: \\"GraphQL request\\",
      Query$noDirectives: \\"GraphQL request\\",
      Query$oneDirective: \\"GraphQL request\\",
    } as const,
  ),
  Recursive: new $$ObjectTypeInfo(
    {
      Recursive$id: \\"id\\",
    },
    {
      id: \\"Recursive$id\\",
    },
    null as any as {
      Recursive$id: \\"ID\\",
    },
    null as any as {
      Recursive$id: $$Identity,
    },
    {
      Recursive$next: \\"next\\",
    },
    {
      next: \\"Recursive$next\\",
    },
    null as any as {
      Recursive$next: \\"Recursive\\",
    },
    null as any as {
      Recursive$next: $$Identity,
    },
    null as any as {
      Recursive$id: {},
      Recursive$next: {},
    },
    {
      Recursive$id: {},
      Recursive$next: {},
    },
    {
      Recursive$id: {},
      Recursive$next: {},
    },
    {
      Recursive$id: \\"GraphQL request\\",
      Recursive$next: \\"GraphQL request\\",
    } as const,
  ),
  ShallowOnly: new $$ObjectTypeInfo(
    {
      ShallowOnly$a: \\"a\\",
      ShallowOnly$b: \\"b\\",
    },
    {
      a: \\"ShallowOnly$a\\",
      b: \\"ShallowOnly$b\\",
    },
    null as any as {
      ShallowOnly$a: \\"String\\",
      ShallowOnly$b: \\"Number\\",
    },
    null as any as {
      ShallowOnly$a: $$Identity,
      ShallowOnly$b: $$Identity,
    },
    {}, {}, {}, {},
    null as any as {
      ShallowOnly$a: {},
      ShallowOnly$b: {},
    },
    {
      ShallowOnly$a: {},
      ShallowOnly$b: {},
    },
    {
      ShallowOnly$a: {},
      ShallowOnly$b: {},
    },
    {
      ShallowOnly$a: \\"GraphQL request\\",
      ShallowOnly$b: \\"GraphQL request\\",
    } as const,
  ),
}

export type BinaryTree$ = $$ObjectTypeInfoMap[\\"BinaryTree\\"][\\"Frag\\"];
export type DeepOnly$ = $$ObjectTypeInfoMap[\\"DeepOnly\\"][\\"Frag\\"];
export type Query$ = $$ObjectTypeInfoMap[\\"Query\\"][\\"Frag\\"];
export type Recursive$ = $$ObjectTypeInfoMap[\\"Recursive\\"][\\"Frag\\"];
export type ShallowOnly$ = $$ObjectTypeInfoMap[\\"ShallowOnly\\"][\\"Frag\\"];

const BinaryTree$$ = <F extends $$DeepArray<BinaryTree$>>(...frag: F): F[number][] => frag;

const _BinaryTree = {
  $: BinaryTree$$,
  node: \\"BinaryTree$node\\",
} as const;

export const BinaryTree: typeof _BinaryTree & {
  left: $$MapWrap<typeof$BinaryTree, \\"BinaryTree$left\\">,
  right: $$MapWrap<typeof$BinaryTree, \\"BinaryTree$right\\">,
} = {
  ..._BinaryTree,
  left: $$mapWrap(() => BinaryTree, \\"BinaryTree$left\\"),
  right: $$mapWrap(() => BinaryTree, \\"BinaryTree$right\\"),
};

type typeof$BinaryTree = typeof BinaryTree

const DeepOnly$$ = <F extends $$DeepArray<DeepOnly$>>(...frag: F): F[number][] => frag;

export const DeepOnly: {
  $: typeof DeepOnly$$,
  a: $$MapWrap<typeof$ShallowOnly, \\"DeepOnly$a\\">,
  b: $$MapWrap<typeof$ShallowOnly, \\"DeepOnly$b\\">,
} = {
  $: DeepOnly$$,
  a: $$mapWrap(() => ShallowOnly, \\"DeepOnly$a\\"),
  b: $$mapWrap(() => ShallowOnly, \\"DeepOnly$b\\"),
};

type typeof$DeepOnly = typeof DeepOnly

const Query$$ = <F extends $$DeepArray<Query$>>(...frag: F): F[number][] => frag;

const _Query = {
  $: Query$$,
  oneDirective: \\"Query$oneDirective\\",
} as const;

export const Query: typeof _Query & {
  multDirectivesArgs: $$MapWrap<typeof$BinaryTree, \\"Query$multDirectivesArgs\\">,
  multDirectivesNoArgs: $$MapWrap<typeof$ShallowOnly, \\"Query$multDirectivesNoArgs\\">,
  multDirectivesNullArgs: $$MapWrap<typeof$DeepOnly, \\"Query$multDirectivesNullArgs\\">,
  noDirectives: $$MapWrap<typeof$Recursive, \\"Query$noDirectives\\">,
} = {
  ..._Query,
  multDirectivesArgs: $$mapWrap(() => BinaryTree, \\"Query$multDirectivesArgs\\"),
  multDirectivesNoArgs: $$mapWrap(() => ShallowOnly, \\"Query$multDirectivesNoArgs\\"),
  multDirectivesNullArgs: $$mapWrap(() => DeepOnly, \\"Query$multDirectivesNullArgs\\"),
  noDirectives: $$mapWrap(() => Recursive, \\"Query$noDirectives\\"),
};

type typeof$Query = typeof Query

const Recursive$$ = <F extends $$DeepArray<Recursive$>>(...frag: F): F[number][] => frag;

const _Recursive = {
  $: Recursive$$,
  id: \\"Recursive$id\\",
} as const;

export const Recursive: typeof _Recursive & {
  next: $$MapWrap<typeof$Recursive, \\"Recursive$next\\">,
} = {
  ..._Recursive,
  next: $$mapWrap(() => Recursive, \\"Recursive$next\\"),
};

type typeof$Recursive = typeof Recursive

const ShallowOnly$$ = <F extends $$DeepArray<ShallowOnly$>>(...frag: F): F[number][] => frag;

export const ShallowOnly = {
  $: ShallowOnly$$,
  a: \\"ShallowOnly$a\\",
  b: \\"ShallowOnly$b\\",
} as const;

type typeof$ShallowOnly = typeof ShallowOnly

export type $BinaryTree<F extends $$DeepArray<BinaryTree$>> = $$Result<\\"BinaryTree\\", $$UnwrapDeepArray<F>>
export type $DeepOnly<F extends $$DeepArray<DeepOnly$>> = $$Result<\\"DeepOnly\\", $$UnwrapDeepArray<F>>
export type $Query<F extends $$DeepArray<Query$>> = $$Result<\\"Query\\", $$UnwrapDeepArray<F>>
export type $Recursive<F extends $$DeepArray<Recursive$>> = $$Result<\\"Recursive\\", $$UnwrapDeepArray<F>>
export type $ShallowOnly<F extends $$DeepArray<ShallowOnly$>> = $$Result<\\"ShallowOnly\\", $$UnwrapDeepArray<F>>"
`;
