// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`stringifyObjectTypes.gql BinaryTree 1`] = `
"type _$BinaryTree<F extends BinaryTree$> =
  & (typeof BinaryTree$node extends F ? { node: String } : {})
  & ($<typeof BinaryTree$left, any> extends F ? { left: (_$BinaryTree<Extract<F, $<typeof BinaryTree$left, BinaryTree$>>[\\"l\\"]> | null) } : {})
  & ($<typeof BinaryTree$right, any> extends F ? { right: (_$BinaryTree<Extract<F, $<typeof BinaryTree$right, BinaryTree$>>[\\"l\\"]> | null) } : {})
export type $BinaryTree<F extends BinaryTree$[]> = _$BinaryTree<F[number]>;"
`;

exports[`stringifyObjectTypes.gql DeepOnly 1`] = `
"type _$DeepOnly<F extends DeepOnly$> =
  & ($<typeof DeepOnly$a, any> extends F ? { a: _$ShallowOnly<Extract<F, $<typeof DeepOnly$a, ShallowOnly$>>[\\"l\\"]> } : {})
  & ($<typeof DeepOnly$b, any> extends F ? { b: (_$ShallowOnly<Extract<F, $<typeof DeepOnly$b, ShallowOnly$>>[\\"l\\"]> | null)[] } : {})
export type $DeepOnly<F extends DeepOnly$[]> = _$DeepOnly<F[number]>;"
`;

exports[`stringifyObjectTypes.gql Recursive 1`] = `
"type _$Recursive<F extends Recursive$> =
  & (typeof Recursive$id extends F ? { id: ID } : {})
  & ($<typeof Recursive$next, any> extends F ? { next: _$Recursive<Extract<F, $<typeof Recursive$next, Recursive$>>[\\"l\\"]> } : {})
export type $Recursive<F extends Recursive$[]> = _$Recursive<F[number]>;"
`;

exports[`stringifyObjectTypes.gql ShallowOnly 1`] = `
"type _$ShallowOnly<F extends ShallowOnly$> =
  & (typeof ShallowOnly$a extends F ? { a: String } : {})
  & (typeof ShallowOnly$b extends F ? { b: Number } : {})
export type $ShallowOnly<F extends ShallowOnly$[]> = _$ShallowOnly<F[number]>;"
`;
