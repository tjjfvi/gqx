// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`stringifyObjectTypes.gql BinaryTree 1`] = `
"const BinaryTree$$ = <F extends $$DeepArray<BinaryTree$>>(...frag: F): F[number][] => frag;

const _BinaryTree = {
  $: BinaryTree$$,
  id: \\"BinaryTree$id\\",
  node: \\"BinaryTree$node\\",
} as const;

export const BinaryTree: typeof _BinaryTree & {
  left: $$MapWrap<typeof$BinaryTree, \\"BinaryTree$left\\">,
  right: $$MapWrap<typeof$BinaryTree, \\"BinaryTree$right\\">,
} = {
  ..._BinaryTree,
  left: $$mapWrap(() => BinaryTree, \\"BinaryTree$left\\"),
  right: $$mapWrap(() => BinaryTree, \\"BinaryTree$right\\"),
};

type typeof$BinaryTree = typeof BinaryTree"
`;

exports[`stringifyObjectTypes.gql DeepOnly 1`] = `
"const DeepOnly$$ = <F extends $$DeepArray<DeepOnly$>>(...frag: F): F[number][] => frag;

export const DeepOnly: {
  $: typeof DeepOnly$$,
  a: $$MapWrap<typeof$ShallowOnly, \\"DeepOnly$a\\">,
  b: $$MapWrap<typeof$ShallowOnly, \\"DeepOnly$b\\">,
} = {
  $: DeepOnly$$,
  a: $$mapWrap(() => ShallowOnly, \\"DeepOnly$a\\"),
  b: $$mapWrap(() => ShallowOnly, \\"DeepOnly$b\\"),
};

type typeof$DeepOnly = typeof DeepOnly"
`;

exports[`stringifyObjectTypes.gql Query 1`] = `
"const Query$$ = <F extends $$DeepArray<Query$>>(...frag: F): F[number][] => frag;

const _Query = {
  $: Query$$,
  oneDirective: \\"Query$oneDirective\\",
} as const;

export const Query: typeof _Query & {
  multDirectivesArgs: $$MapWrap<typeof$BinaryTree, \\"Query$multDirectivesArgs\\">,
  multDirectivesNoArgs: $$MapWrap<typeof$ShallowOnly, \\"Query$multDirectivesNoArgs\\">,
  multDirectivesNullArgs: $$MapWrap<typeof$DeepOnly, \\"Query$multDirectivesNullArgs\\">,
  noDirectives: $$MapWrap<typeof$Recursive, \\"Query$noDirectives\\">,
} = {
  ..._Query,
  multDirectivesArgs: $$mapWrap(() => BinaryTree, \\"Query$multDirectivesArgs\\"),
  multDirectivesNoArgs: $$mapWrap(() => ShallowOnly, \\"Query$multDirectivesNoArgs\\"),
  multDirectivesNullArgs: $$mapWrap(() => DeepOnly, \\"Query$multDirectivesNullArgs\\"),
  noDirectives: $$mapWrap(() => Recursive, \\"Query$noDirectives\\"),
};

type typeof$Query = typeof Query"
`;

exports[`stringifyObjectTypes.gql Recursive 1`] = `
"const Recursive$$ = <F extends $$DeepArray<Recursive$>>(...frag: F): F[number][] => frag;

const _Recursive = {
  $: Recursive$$,
  id: \\"Recursive$id\\",
} as const;

export const Recursive: typeof _Recursive & {
  next: $$MapWrap<typeof$Recursive, \\"Recursive$next\\">,
} = {
  ..._Recursive,
  next: $$mapWrap(() => Recursive, \\"Recursive$next\\"),
};

type typeof$Recursive = typeof Recursive"
`;

exports[`stringifyObjectTypes.gql ShallowOnly 1`] = `
"const ShallowOnly$$ = <F extends $$DeepArray<ShallowOnly$>>(...frag: F): F[number][] => frag;

export const ShallowOnly = {
  $: ShallowOnly$$,
  a: \\"ShallowOnly$a\\",
  b: \\"ShallowOnly$b\\",
} as const;

type typeof$ShallowOnly = typeof ShallowOnly"
`;

exports[`stringifyObjectTypes.gql WithId 1`] = `
"const WithId$$ = <F extends $$DeepArray<WithId$>>(...frag: F): F[number][] => frag;

export const WithId = {
  $: WithId$$,
  id: \\"WithId$id\\",
} as const;

type typeof$WithId = typeof WithId"
`;
