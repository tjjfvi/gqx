// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"export type $$ObjectType = (
  | \\"BinaryTree\\"
  | \\"DeepOnly\\"
  | \\"Query\\"
  | \\"Recursive\\"
  | \\"ShallowOnly\\"
  | \\"WithId\\"
)

export const $$objectTypeInfoMap = {
  BinaryTree: new $$ObjectTypeInfo(
    \\"BinaryTree\\",
    {
      BinaryTree$id: \\"id\\",
      BinaryTree$node: \\"node\\",
    },
    {
      id: \\"BinaryTree$id\\",
      node: \\"BinaryTree$node\\",
    },
    null as any as {
      BinaryTree$id: \\"ID\\",
      BinaryTree$node: \\"String\\",
    },
    null as any as {
      BinaryTree$id: $$Identity,
      BinaryTree$node: $$Identity,
    },
    {
      BinaryTree$left: \\"left\\",
      BinaryTree$right: \\"right\\",
    },
    {
      left: \\"BinaryTree$left\\",
      right: \\"BinaryTree$right\\",
    },
    null as any as {
      BinaryTree$left: \\"BinaryTree\\",
      BinaryTree$right: \\"BinaryTree\\",
    },
    null as any as {
      BinaryTree$left: $$Optional<$$Identity>,
      BinaryTree$right: $$Optional<$$Identity>,
    },
    null as any as {
      BinaryTree$id: {},
      BinaryTree$left: {},
      BinaryTree$node: {},
      BinaryTree$right: {},
    },
    {
      BinaryTree$id: {},
      BinaryTree$left: {},
      BinaryTree$node: {},
      BinaryTree$right: {},
    },
    {
      BinaryTree$id: {},
      BinaryTree$left: {},
      BinaryTree$node: {},
      BinaryTree$right: {},
    },
    {
      BinaryTree$id: \\"GraphQL request\\",
      BinaryTree$left: \\"GraphQL request\\",
      BinaryTree$node: \\"GraphQL request\\",
      BinaryTree$right: \\"GraphQL request\\",
    } as const,
    null as any as never,
    null as any as (
      | \\"WithId\\"
    ),
  ),
  DeepOnly: new $$ObjectTypeInfo(
    \\"DeepOnly\\",
    {}, {}, {}, {},
    {
      DeepOnly$a: \\"a\\",
      DeepOnly$b: \\"b\\",
    },
    {
      a: \\"DeepOnly$a\\",
      b: \\"DeepOnly$b\\",
    },
    null as any as {
      DeepOnly$a: \\"ShallowOnly\\",
      DeepOnly$b: \\"ShallowOnly\\",
    },
    null as any as {
      DeepOnly$a: $$Identity,
      DeepOnly$b: $$Array<$$Optional<$$Identity>>,
    },
    null as any as {
      DeepOnly$a: {},
      DeepOnly$b: {},
    },
    {
      DeepOnly$a: {},
      DeepOnly$b: {},
    },
    {
      DeepOnly$a: {},
      DeepOnly$b: {},
    },
    {
      DeepOnly$a: \\"GraphQL request\\",
      DeepOnly$b: \\"GraphQL request\\",
    } as const,
    null as any as never,
    null as any as never,
  ),
  Query: new $$ObjectTypeInfo(
    \\"Query\\",
    {
      Query$oneDirective: \\"oneDirective\\",
    },
    {
      oneDirective: \\"Query$oneDirective\\",
    },
    null as any as {
      Query$oneDirective: \\"String\\",
    },
    null as any as {
      Query$oneDirective: $$Optional<$$Identity>,
    },
    {
      Query$multDirectivesArgs: \\"multDirectivesArgs\\",
      Query$multDirectivesNoArgs: \\"multDirectivesNoArgs\\",
      Query$multDirectivesNullArgs: \\"multDirectivesNullArgs\\",
      Query$noDirectives: \\"noDirectives\\",
    },
    {
      multDirectivesArgs: \\"Query$multDirectivesArgs\\",
      multDirectivesNoArgs: \\"Query$multDirectivesNoArgs\\",
      multDirectivesNullArgs: \\"Query$multDirectivesNullArgs\\",
      noDirectives: \\"Query$noDirectives\\",
    },
    null as any as {
      Query$multDirectivesArgs: \\"BinaryTree\\",
      Query$multDirectivesNoArgs: \\"ShallowOnly\\",
      Query$multDirectivesNullArgs: \\"DeepOnly\\",
      Query$noDirectives: \\"Recursive\\",
    },
    null as any as {
      Query$multDirectivesArgs: $$Identity,
      Query$multDirectivesNoArgs: $$Optional<$$Identity>,
      Query$multDirectivesNullArgs: $$Identity,
      Query$noDirectives: $$Array<$$Identity>,
    },
    null as any as {
      Query$multDirectivesArgs: {},
      Query$multDirectivesNoArgs: {},
      Query$multDirectivesNullArgs: {},
      Query$noDirectives: {},
      Query$oneDirective: {},
    },
    {
      Query$multDirectivesArgs: {},
      Query$multDirectivesNoArgs: {},
      Query$multDirectivesNullArgs: {},
      Query$noDirectives: {},
      Query$oneDirective: {},
    },
    {
      Query$multDirectivesArgs: {
        scalarArg: {
          a: \\"test\\",
          b: 12345,
        },
        inputArg: {
          a: {
            x: 5,
            y: [
              1,
              2,
              3,
            ],
            z: {
              x: 5,
            },
          },
        },
        scalarArrArg: {
          a: [
            \\"a\\",
            \\"b\\",
            \\"c\\",
            null,
          ],
        },
        inputArrArg: {
          a: [
            {
              x: 5,
            },
            {
              x: 6,
            },
            {
              y: [
                1,
                2,
                3,
              ],
            },
          ],
        },
      },
      Query$multDirectivesNoArgs: {
        noArgs: {},
        scalarArg: {},
        inputArg: {},
        scalarArrArg: {},
        inputArrArg: {},
      },
      Query$multDirectivesNullArgs: {
        scalarArg: {
          a: null,
          b: null,
        },
        inputArg: {
          a: null,
        },
        scalarArrArg: {
          a: null,
        },
        inputArrArg: {
          a: null,
        },
      },
      Query$noDirectives: {},
      Query$oneDirective: {
        scalarArg: {
          x: \\"string\\",
        },
      },
    },
    {
      Query$multDirectivesArgs: \\"GraphQL request\\",
      Query$multDirectivesNoArgs: \\"GraphQL request\\",
      Query$multDirectivesNullArgs: \\"GraphQL request\\",
      Query$noDirectives: \\"GraphQL request\\",
      Query$oneDirective: \\"GraphQL request\\",
    } as const,
    null as any as never,
    null as any as never,
  ),
  Recursive: new $$ObjectTypeInfo(
    \\"Recursive\\",
    {
      Recursive$id: \\"id\\",
    },
    {
      id: \\"Recursive$id\\",
    },
    null as any as {
      Recursive$id: \\"ID\\",
    },
    null as any as {
      Recursive$id: $$Identity,
    },
    {
      Recursive$next: \\"next\\",
    },
    {
      next: \\"Recursive$next\\",
    },
    null as any as {
      Recursive$next: \\"Recursive\\",
    },
    null as any as {
      Recursive$next: $$Identity,
    },
    null as any as {
      Recursive$id: {},
      Recursive$next: {},
    },
    {
      Recursive$id: {},
      Recursive$next: {},
    },
    {
      Recursive$id: {},
      Recursive$next: {},
    },
    {
      Recursive$id: \\"GraphQL request\\",
      Recursive$next: \\"GraphQL request\\",
    } as const,
    null as any as never,
    null as any as (
      | \\"WithId\\"
    ),
  ),
  ShallowOnly: new $$ObjectTypeInfo(
    \\"ShallowOnly\\",
    {
      ShallowOnly$a: \\"a\\",
      ShallowOnly$b: \\"b\\",
    },
    {
      a: \\"ShallowOnly$a\\",
      b: \\"ShallowOnly$b\\",
    },
    null as any as {
      ShallowOnly$a: \\"String\\",
      ShallowOnly$b: \\"Number\\",
    },
    null as any as {
      ShallowOnly$a: $$Identity,
      ShallowOnly$b: $$Identity,
    },
    {}, {}, {}, {},
    null as any as {
      ShallowOnly$a: {},
      ShallowOnly$b: {},
    },
    {
      ShallowOnly$a: {},
      ShallowOnly$b: {},
    },
    {
      ShallowOnly$a: {},
      ShallowOnly$b: {},
    },
    {
      ShallowOnly$a: \\"GraphQL request\\",
      ShallowOnly$b: \\"GraphQL request\\",
    } as const,
    null as any as never,
    null as any as never,
  ),
  WithId: new $$ObjectTypeInfo(
    \\"WithId\\",
    {
      WithId$id: \\"id\\",
    },
    {
      id: \\"WithId$id\\",
    },
    null as any as {
      WithId$id: \\"ID\\",
    },
    null as any as {
      WithId$id: $$Identity,
    },
    {}, {}, {}, {},
    null as any as {
      WithId$id: {},
    },
    {
      WithId$id: {},
    },
    {
      WithId$id: {},
    },
    {
      WithId$id: \\"GraphQL request\\",
    } as const,
    null as any as (
      | \\"BinaryTree\\"
      | \\"Recursive\\"
    ),
    null as any as never,
  ),
}"
`;
