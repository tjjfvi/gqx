// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"/* eslint-disable */

type Int = number;
type Float = number;
type String = string;
type ID = string;
type Boolean = boolean;

interface $<F, L> { f: F; l: L }
const $$ = <F, L>(f: F, l: L) => ({ f, l });

export type $$DeepArray<T> = (T | $$DeepArray<T>)[];
export type $$UnwrapDeepArray<T extends $$DeepArray<any>> = T extends $$DeepArray<infer U> ? U : never;

export interface $$GqxGen {
  id: $$OperationId;
  return: unknown;
}
type $$CallGqxGen<F extends $$GqxGen, I extends $$OperationId> = (F & { id: I })[\\"return\\"];
export type $$GqxImpl<F extends $$GqxGen> = <I extends $$OperationId>(id: I) => $$CallGqxGen<F, I>;

export interface $$OperationId {
  typeProp: string;
  type: string;
  prop: string;
  inputTypes: { [x: string]: string };
}

const __wrap__ = Symbol();

type $$Wrap<X, Y> = X extends $<infer F, infer L> ? $<F, $$Wrap<L, Y>> : never;
type $$MapWrap<O, F> = {
  [K in keyof O | typeof __wrap__ | \\"$\\"]:
    K extends \\"$\\" ?
      <T extends $_>(x: $$DeepArray<T>) =>
        $<F, O extends { [__wrap__]: infer X } ? $$Wrap<X, T> : T>[] :
      K extends keyof O ?
        O[K] extends $_ ?
          $<F, O[K]> :
          $$MapWrap<O[K], F> :
        $<F, null>
}

const $$mapWrap = <O, F>(o: () => O, f: F): $$MapWrap<O, F> =>
  // @ts-ignore
  new Proxy(Object.create(null), {
    get: (t, k: string) => t[k] || (t[k] =
      k !== \\"$\\" ?
        o()[k].$ ?
          $$mapWrap(() => o()[k], f) :
          $$(f, o()[k]) :
        // @ts-ignore
        (a: any) => (\\"$\\" in o() ? o().$(a) : a).flat(Infinity).map((a: any) => $$(f, a))
    ),
  })

export const $$reconstruct = <I extends $$OperationId>(id: I, input: $$Input.$<I>, props: $$Frag.$<I>) => {
  interface Subs { [k: string]: true | Subs }
  const subs: Subs = {};
  populateSubs(props, subs);
  const frag = genFrag(subs);
  const inputKeys = Object.keys(input);
  const inputDef = inputKeys.length ? \`(\${inputKeys.map(k =>
    \`$\${k}: \${id.inputTypes[k]}\`
  ).join(\\", \\")})\` : \\"\\";
  const inputPass = inputKeys.length ? \`(\${inputKeys.map(k =>
    \`\${k}: $\${k}\`
  )})\` : \\"\\";
  const request = \`\${id.typeProp}\${inputDef} { \${id.prop}\${inputPass}\${frag} }\`;
  return request;

  function genFrag(subs: Subs){
    return (
      Object.keys(subs).length ?
        \`{ \${Object.entries(subs).map(([k, v]) => v === true ? k : k + \\" \\" + genFrag(v)).join(\\" \\")} }\` :
        \\"\\"
    );
  }

  function populateSubs(prop: $_ | $$DeepArray<$_>, subs: Subs | true){
    if(prop instanceof Array)
      return prop.map(p => populateSubs(p, subs));
    if(subs === true)
      return;
    if(\\"prop\\" in prop)
      subs[prop.prop] = true;
    else
      populateSubs(prop.l, subs[prop.f.prop] = (subs[prop.f.prop] || {}));
  }
}

export type Category =
  | \\"Horror\\"
  | \\"SciFi\\"
  | \\"Fiction\\"
  | \\"Fantasy\\"
  | \\"NonFiction\\"
  | \\"Romance\\"
  | \\"Historical\\"
  | \\"Mystery\\"
  | \\"Childrens\\"
  | \\"Dystopian\\"
  | \\"Utopian\\"
  | \\"Religous\\"

export interface Cursor {
  start: Int;
  limit: Int;
}

export interface BookFilter {
  title?: (String | null | void);
  author?: (AuthorFilter | null | void);
  categories?: (Category[] | null | void);
  rating: StarRating;
}

export interface AuthorFilter {
  name?: (String | null | void);
  rating?: (StarRating | null | void);
}

export interface ReviewInput {
  rating: StarRating;
  book: ID;
  title?: (String | null | void);
  details?: (String | null | void);
}

class Author$id {
  private static _: any;
  static type = \\"Author\\" as const;
  static prop = \\"id\\" as const;
  static f = Author$id;
}
class Author$name {
  private static _: any;
  static type = \\"Author\\" as const;
  static prop = \\"name\\" as const;
  static f = Author$name;
}
class Author$books {
  private static _: any;
  static type = \\"Author\\" as const;
  static prop = \\"books\\" as const;
  static f = Author$books;
}
class Author$favoriteBook {
  private static _: any;
  static type = \\"Author\\" as const;
  static prop = \\"favoriteBook\\" as const;
  static f = Author$favoriteBook;
}
class Author$rating {
  private static _: any;
  static type = \\"Author\\" as const;
  static prop = \\"rating\\" as const;
  static f = Author$rating;
}
class Book$id {
  private static _: any;
  static type = \\"Book\\" as const;
  static prop = \\"id\\" as const;
  static f = Book$id;
}
class Book$author {
  private static _: any;
  static type = \\"Book\\" as const;
  static prop = \\"author\\" as const;
  static f = Book$author;
}
class Book$title {
  private static _: any;
  static type = \\"Book\\" as const;
  static prop = \\"title\\" as const;
  static f = Book$title;
}
class Book$description {
  private static _: any;
  static type = \\"Book\\" as const;
  static prop = \\"description\\" as const;
  static f = Book$description;
}
class Book$categories {
  private static _: any;
  static type = \\"Book\\" as const;
  static prop = \\"categories\\" as const;
  static f = Book$categories;
}
class Book$reviews {
  private static _: any;
  static type = \\"Book\\" as const;
  static prop = \\"reviews\\" as const;
  static f = Book$reviews;
}
class Book$rating {
  private static _: any;
  static type = \\"Book\\" as const;
  static prop = \\"rating\\" as const;
  static f = Book$rating;
}
class Review$id {
  private static _: any;
  static type = \\"Review\\" as const;
  static prop = \\"id\\" as const;
  static f = Review$id;
}
class Review$rating {
  private static _: any;
  static type = \\"Review\\" as const;
  static prop = \\"rating\\" as const;
  static f = Review$rating;
}
class Review$book {
  private static _: any;
  static type = \\"Review\\" as const;
  static prop = \\"book\\" as const;
  static f = Review$book;
}
class Review$user {
  private static _: any;
  static type = \\"Review\\" as const;
  static prop = \\"user\\" as const;
  static f = Review$user;
}
class Review$title {
  private static _: any;
  static type = \\"Review\\" as const;
  static prop = \\"title\\" as const;
  static f = Review$title;
}
class Review$details {
  private static _: any;
  static type = \\"Review\\" as const;
  static prop = \\"details\\" as const;
  static f = Review$details;
}
class User$id {
  private static _: any;
  static type = \\"User\\" as const;
  static prop = \\"id\\" as const;
  static f = User$id;
}
class User$author {
  private static _: any;
  static type = \\"User\\" as const;
  static prop = \\"author\\" as const;
  static f = User$author;
}
class User$name {
  private static _: any;
  static type = \\"User\\" as const;
  static prop = \\"name\\" as const;
  static f = User$name;
}
class User$reviews {
  private static _: any;
  static type = \\"User\\" as const;
  static prop = \\"reviews\\" as const;
  static f = User$reviews;
}

export type Author$ =
  | typeof Author$id
  | typeof Author$name
  | typeof Author$rating
  | $<typeof Author$books, Book$>
  | $<typeof Author$favoriteBook, Book$>

export type Book$ =
  | typeof Book$categories
  | typeof Book$description
  | typeof Book$id
  | typeof Book$rating
  | typeof Book$title
  | $<typeof Book$author, Author$>
  | $<typeof Book$reviews, Review$>

export type Review$ =
  | typeof Review$details
  | typeof Review$id
  | typeof Review$rating
  | typeof Review$title
  | $<typeof Review$book, Book$>
  | $<typeof Review$user, User$>

export type User$ =
  | typeof User$id
  | typeof User$name
  | $<typeof User$author, Author$>
  | $<typeof User$reviews, Review$>

export type $_ =
  | Author$
  | Book$
  | Review$
  | User$

const _Author = {
  id: Author$id,
  name: Author$name,
  rating: Author$rating,
};

export const Author: typeof _Author & {
  books: $$MapWrap<typeof$Book, typeof Author$books>,
  favoriteBook: $$MapWrap<typeof$Book, typeof Author$favoriteBook>,
} = {
  ..._Author,
  books: $$mapWrap(() => Book, Author$books),
  favoriteBook: $$mapWrap(() => Book, Author$favoriteBook),
};

type typeof$Author = typeof Author

const _Book = {
  categories: Book$categories,
  description: Book$description,
  id: Book$id,
  rating: Book$rating,
  title: Book$title,
};

export const Book: typeof _Book & {
  author: $$MapWrap<typeof$Author, typeof Book$author>,
  reviews: $$MapWrap<typeof$Review, typeof Book$reviews>,
} = {
  ..._Book,
  author: $$mapWrap(() => Author, Book$author),
  reviews: $$mapWrap(() => Review, Book$reviews),
};

type typeof$Book = typeof Book

const _Review = {
  details: Review$details,
  id: Review$id,
  rating: Review$rating,
  title: Review$title,
};

export const Review: typeof _Review & {
  book: $$MapWrap<typeof$Book, typeof Review$book>,
  user: $$MapWrap<typeof$User, typeof Review$user>,
} = {
  ..._Review,
  book: $$mapWrap(() => Book, Review$book),
  user: $$mapWrap(() => User, Review$user),
};

type typeof$Review = typeof Review

const _User = {
  id: User$id,
  name: User$name,
};

export const User: typeof _User & {
  author: $$MapWrap<typeof$Author, typeof User$author>,
  reviews: $$MapWrap<typeof$Review, typeof User$reviews>,
} = {
  ..._User,
  author: $$mapWrap(() => Author, User$author),
  reviews: $$mapWrap(() => Review, User$reviews),
};

type typeof$User = typeof User

interface __$Author<F extends Author$> {
  id: ID,
  name: String,
  rating: StarRating,
  books: _$Book<Extract<F, $<typeof Author$books, Book$>>[\\"l\\"]>[],
  favoriteBook: _$Book<Extract<F, $<typeof Author$favoriteBook, Book$>>[\\"l\\"]>,
}
type _$Author<F extends Author$> = Pick<__$Author<F>, F[\\"f\\"][\\"prop\\"]>;
export type $Author<F extends $$DeepArray<Author$>> = _$Author<$$UnwrapDeepArray<F>>

interface __$Book<F extends Book$> {
  categories: Category[],
  description: String,
  id: ID,
  rating: StarRating,
  title: String,
  author: _$Author<Extract<F, $<typeof Book$author, Author$>>[\\"l\\"]>,
  reviews: _$Review<Extract<F, $<typeof Book$reviews, Review$>>[\\"l\\"]>[],
}
type _$Book<F extends Book$> = Pick<__$Book<F>, F[\\"f\\"][\\"prop\\"]>;
export type $Book<F extends $$DeepArray<Book$>> = _$Book<$$UnwrapDeepArray<F>>

interface __$Review<F extends Review$> {
  details: (String | null),
  id: ID,
  rating: StarRating,
  title: (String | null),
  book: _$Book<Extract<F, $<typeof Review$book, Book$>>[\\"l\\"]>,
  user: _$User<Extract<F, $<typeof Review$user, User$>>[\\"l\\"]>,
}
type _$Review<F extends Review$> = Pick<__$Review<F>, F[\\"f\\"][\\"prop\\"]>;
export type $Review<F extends $$DeepArray<Review$>> = _$Review<$$UnwrapDeepArray<F>>

interface __$User<F extends User$> {
  id: ID,
  name: String,
  author: (_$Author<Extract<F, $<typeof User$author, Author$>>[\\"l\\"]> | null),
  reviews: _$Review<Extract<F, $<typeof User$reviews, Review$>>[\\"l\\"]>[],
}
type _$User<F extends User$> = Pick<__$User<F>, F[\\"f\\"][\\"prop\\"]>;
export type $User<F extends $$DeepArray<User$>> = _$User<$$UnwrapDeepArray<F>>

export class Query$getAuthor {
  private static _: any;
  static typeProp = \\"query\\";
  static type = \\"Query\\";
  static prop = \\"getAuthor\\";
  static inputTypes = {
    id: \\"ID!\\",
  };
}

export class Query$getBook {
  private static _: any;
  static typeProp = \\"query\\";
  static type = \\"Query\\";
  static prop = \\"getBook\\";
  static inputTypes = {
    id: \\"ID!\\",
  };
}

export class Query$listBooks {
  private static _: any;
  static typeProp = \\"query\\";
  static type = \\"Query\\";
  static prop = \\"listBooks\\";
  static inputTypes = {
    cursor: \\"Cursor\\",
    filter: \\"BookFilter\\",
  };
}

export class Mutation$addReview {
  private static _: any;
  static typeProp = \\"mutation\\";
  static type = \\"Mutation\\";
  static prop = \\"addReview\\";
  static inputTypes = {
    input: \\"ReviewInput!\\",
  };
}

export namespace $$Input {
  export namespace Query {
    export interface getAuthor {
      id: ID;
    }
    export interface getBook {
      id: ID;
    }
    export interface listBooks {
      cursor?: (Cursor | null | void);
      filter?: (BookFilter | null | void);
    }
  }
  export namespace Mutation {
    export interface addReview {
      input: ReviewInput;
    }
  }

  export type $<T> =
    | (T extends typeof Query$getAuthor ? Query.getAuthor : never)
    | (T extends typeof Query$getBook ? Query.getBook : never)
    | (T extends typeof Query$listBooks ? Query.listBooks : never)
    | (T extends typeof Mutation$addReview ? Mutation.addReview : never)
}

export namespace $$Frag {
  export namespace Query {
    export type getAuthor = $$DeepArray<Author$>;
    export type getBook = $$DeepArray<Book$>;
    export type listBooks = $$DeepArray<Book$>;
  }
  export namespace Mutation {
    export type addReview = $$DeepArray<Review$>;
  }

  export type $<T> =
    | (T extends typeof Query$getAuthor ? Query.getAuthor : never)
    | (T extends typeof Query$getBook ? Query.getBook : never)
    | (T extends typeof Query$listBooks ? Query.listBooks : never)
    | (T extends typeof Mutation$addReview ? Mutation.addReview : never)
}

export namespace $$Output {
  export namespace Query {
    export type getAuthor<F extends $$Frag.$<typeof Query$getAuthor>> = $Author<F>
    export type getBook<F extends $$Frag.$<typeof Query$getBook>> = $Book<F>
    export type listBooks<F extends $$Frag.$<typeof Query$listBooks>> = $Book<F>[]
  }
  export namespace Mutation {
    export type addReview<F extends $$Frag.$<typeof Mutation$addReview>> = $Review<F>
  }

  export type $<T, F extends $$Frag.$<T>> =
    | (T extends typeof Query$getAuthor ? F extends $$Frag.$<typeof Query$getAuthor> ? Query.getAuthor<F> : never : never)
    | (T extends typeof Query$getBook ? F extends $$Frag.$<typeof Query$getBook> ? Query.getBook<F> : never : never)
    | (T extends typeof Query$listBooks ? F extends $$Frag.$<typeof Query$listBooks> ? Query.listBooks<F> : never : never)
    | (T extends typeof Mutation$addReview ? F extends $$Frag.$<typeof Mutation$addReview> ? Mutation.addReview<F> : never : never)
}

export const $$generateObject = <F extends $$GqxGen>(f: $$GqxImpl<F>) => ({
  query: {
    getAuthor: f(Query$getAuthor),
    getBook: f(Query$getBook),
    listBooks: f(Query$listBooks),
  },
  mutation: {
    addReview: f(Mutation$addReview),
  },
})

export namespace $$Directives {
  export namespace Query {
    export type getAuthor = {}
    export type getBook = {}
    export type listBooks = {}
  }
  export namespace Mutation {
    export type addReview = {
      auth: {
        test: {
          title: \\"hi\\",
        },
        test2: [
          \\"hi\\",
          \\"hi2\\",
        ],
      },
    }
  }
  export namespace Book {
    export type id = {}
    export type author = {}
    export type title = {}
    export type description = {}
    export type categories = {}
    export type reviews = {}
    export type rating = {}
  }
  export namespace Author {
    export type id = {}
    export type name = {}
    export type books = {}
    export type favoriteBook = {}
    export type rating = {}
  }
  export namespace Review {
    export type id = {}
    export type rating = {}
    export type book = {}
    export type user = {}
    export type title = {}
    export type details = {}
  }
  export namespace User {
    export type id = {}
    export type author = {}
    export type name = {}
    export type reviews = {}
  }
  export type $<T> =
    T extends Query$getAuthor ? Query.getAuthor :
    T extends Query$getBook ? Query.getBook :
    T extends Query$listBooks ? Query.listBooks :
    T extends Mutation$addReview ? Mutation.addReview :
    T extends Book$id ? Book.id :
    T extends Book$author ? Book.author :
    T extends Book$title ? Book.title :
    T extends Book$description ? Book.description :
    T extends Book$categories ? Book.categories :
    T extends Book$reviews ? Book.reviews :
    T extends Book$rating ? Book.rating :
    T extends Author$id ? Author.id :
    T extends Author$name ? Author.name :
    T extends Author$books ? Author.books :
    T extends Author$favoriteBook ? Author.favoriteBook :
    T extends Author$rating ? Author.rating :
    T extends Review$id ? Review.id :
    T extends Review$rating ? Review.rating :
    T extends Review$book ? Review.book :
    T extends Review$user ? Review.user :
    T extends Review$title ? Review.title :
    T extends Review$details ? Review.details :
    T extends User$id ? User.id :
    T extends User$author ? User.author :
    T extends User$name ? User.name :
    T extends User$reviews ? User.reviews :
    never
}"
`;
