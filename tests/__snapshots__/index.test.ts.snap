// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"type Int = number;
type Float = number;
type String = string;
type ID = string;
type Boolean = boolean;

interface $<F, L> { f: F; l: L }
const $$ = <F, L>(f: F, l: L) => ({ f, l });

export type $$DeepArray<T> = (T | DeepArray<T>)[];
export type $$UnwrapDeepArray<T extends DeepArray<any>> = T extends DeepArray<infer U> ? U : never;

export interface $$GqxFunc {
  id: $_;
  result: unknown;
}
type $$CallGqxFunc<F extends $$GqxFunc, I extends $_> = ($$GqxFunc & { id: I })[\\"result\\"];
export type $$GqxImpl<F extends $$GqxFunc> = <I extends $_>(id: I) => $$CallGqxFunc<F, I>;

interface $$OperationId {
  typeProp: string;
  type: string;
  prop: string;
  inputTypes: { [x: string]: string };
}

const __wrap__ = Symbol();

type $$Wrap<X, Y> = X extends $<infer F, infer L> ? $<F, $$Wrap<L, Y>> : never;
type $$MapWrap<O, F> = {
  [K in keyof O | typeof __wrap__ | \\"$\\"]:
    K extends \\"$\\" ?
      <T extends $_, TA extends DeepArray<T>>(...x: TA) =>
        $<F, O extends { [__wrap__]: infer X } ? $$Wrap<X, T> : T>[] :
      K extends keyof O ?
        O[K] extends $_ ?
          $<F, O[K]> :
          $$MapWrap<O[K], F> :
        $<F, null>
}

const $$mapWrap = <O, F>(o: () => O, f: F): $$MapWrap<O, F> =>
  // @ts-ignore
  new Proxy(Object.create(null), {
    get: (t, k: string) => t[k] || (t[k] =
      k !== \\"$\\" ?
        o()[k].$ ?
          $$mapWrap(() => o()[k], f) :
          $$(f, o()[k]) :
        // @ts-ignore
        (a: any) => (\\"$\\" in o() ? o().$(a) : a).flat(Infinity).map((a: any) => $$(f, a))
    ),
  })

const $$reconstruct = <I extends $$OperationId>(id: I, input: $$Input.$<I>, props: $$Frag.$<I>[]) => {
  interface Subs { [k: string]: true | Subs }
  const subs: Subs = {};
  props.map(prop => populateSubs(prop, subs));
  const frag = genFrag(subs);
  const inputKeys = Object.keys(input);
  const inputDef = inputKeys.length ? \`(\${inputKeys.map(k =>
    \`$\${k}: \${id.inputTypes[k]}\`
  ).join(\\", \\")})\` : \\"\\";
  const inputPass = inputKeys.length ? \`(\${inputKeys.map(k =>
    \`\${k}: $\${k}\`
  )})\` : \\"\\";
  const request = \`\${id.typeProp}\${inputDef} { \${id.prop}\${inputPass}\${frag} }\`;
  return request;

  function genFrag(subs: Subs){
    return (
      Object.keys(subs).length ?
        \`{ \${Object.entries(subs).map(([k, v]) => v === true ? k : k + \\" \\" + genFrag(v)).join(\\" \\")} }\` :
        \\"\\"
    );
  }

  function populateSubs(prop: $_, subs: Subs | true){
    if(subs === true)
      return;
    if(\\"prop\\" in prop)
      subs[prop.prop] = true;
    else
      populateSubs(prop.l, subs[prop.f.prop] = (subs[prop.f.prop] || {}));
  }
}

export type Category =
  | \\"Horror\\"
  | \\"SciFi\\"
  | \\"Fiction\\"
  | \\"Fantasy\\"
  | \\"NonFiction\\"
  | \\"Romance\\"
  | \\"Historical\\"
  | \\"Mystery\\"
  | \\"Childrens\\"
  | \\"Dystopian\\"
  | \\"Utopian\\"
  | \\"Religous\\"

export interface Cursor {
  start: Int;
  limit: Int;
}

export interface BookFilter {
  title?: (String | null | void);
  author?: (AuthorFilter | null | void);
  categories?: (Category[] | null | void);
  rating: StarRating;
}

export interface AuthorFilter {
  name?: (String | null | void);
  rating?: (StarRating | null | void);
}

export interface ReviewInput {
  rating: StarRating;
  book: ID;
  title?: (String | null | void);
  details?: (String | null | void);
}

class Author$id { private static _: any; static type = \\"Author\\"; static prop = \\"id\\"; }
class Author$name { private static _: any; static type = \\"Author\\"; static prop = \\"name\\"; }
class Author$books { private static _: any; static type = \\"Author\\"; static prop = \\"books\\"; }
class Author$favoriteBook { private static _: any; static type = \\"Author\\"; static prop = \\"favoriteBook\\"; }
class Author$rating { private static _: any; static type = \\"Author\\"; static prop = \\"rating\\"; }
class Book$id { private static _: any; static type = \\"Book\\"; static prop = \\"id\\"; }
class Book$author { private static _: any; static type = \\"Book\\"; static prop = \\"author\\"; }
class Book$title { private static _: any; static type = \\"Book\\"; static prop = \\"title\\"; }
class Book$description { private static _: any; static type = \\"Book\\"; static prop = \\"description\\"; }
class Book$categories { private static _: any; static type = \\"Book\\"; static prop = \\"categories\\"; }
class Book$reviews { private static _: any; static type = \\"Book\\"; static prop = \\"reviews\\"; }
class Book$rating { private static _: any; static type = \\"Book\\"; static prop = \\"rating\\"; }
class Review$id { private static _: any; static type = \\"Review\\"; static prop = \\"id\\"; }
class Review$rating { private static _: any; static type = \\"Review\\"; static prop = \\"rating\\"; }
class Review$book { private static _: any; static type = \\"Review\\"; static prop = \\"book\\"; }
class Review$user { private static _: any; static type = \\"Review\\"; static prop = \\"user\\"; }
class Review$title { private static _: any; static type = \\"Review\\"; static prop = \\"title\\"; }
class Review$details { private static _: any; static type = \\"Review\\"; static prop = \\"details\\"; }
class User$id { private static _: any; static type = \\"User\\"; static prop = \\"id\\"; }
class User$author { private static _: any; static type = \\"User\\"; static prop = \\"author\\"; }
class User$name { private static _: any; static type = \\"User\\"; static prop = \\"name\\"; }
class User$reviews { private static _: any; static type = \\"User\\"; static prop = \\"reviews\\"; }

export type Author$ =
  | typeof Author$id
  | typeof Author$name
  | typeof Author$rating
  | $<typeof Author$books, Book$>
  | $<typeof Author$favoriteBook, Book$>

export type Book$ =
  | typeof Book$categories
  | typeof Book$description
  | typeof Book$id
  | typeof Book$rating
  | typeof Book$title
  | $<typeof Book$author, Author$>
  | $<typeof Book$reviews, Review$>

export type Review$ =
  | typeof Review$details
  | typeof Review$id
  | typeof Review$rating
  | typeof Review$title
  | $<typeof Review$book, Book$>
  | $<typeof Review$user, User$>

export type User$ =
  | typeof User$id
  | typeof User$name
  | $<typeof User$author, Author$>
  | $<typeof User$reviews, Review$>

export type $_ =
  | Author$
  | Book$
  | Review$
  | User$

const _Author = {
  id: Author$id,
  name: Author$name,
  rating: Author$rating,
};

export const Author: typeof _Author & {
  books: $$MapWrap<typeof Book, typeof Author$books>,
  favoriteBook: $$MapWrap<typeof Book, typeof Author$favoriteBook>,
} = {
  ..._Author,
  books: $$mapWrap(() => Book, Author$books),
  favoriteBook: $$mapWrap(() => Book, Author$favoriteBook),
};

const _Book = {
  categories: Book$categories,
  description: Book$description,
  id: Book$id,
  rating: Book$rating,
  title: Book$title,
};

export const Book: typeof _Book & {
  author: $$MapWrap<typeof Author, typeof Book$author>,
  reviews: $$MapWrap<typeof Review, typeof Book$reviews>,
} = {
  ..._Book,
  author: $$mapWrap(() => Author, Book$author),
  reviews: $$mapWrap(() => Review, Book$reviews),
};

const _Review = {
  details: Review$details,
  id: Review$id,
  rating: Review$rating,
  title: Review$title,
};

export const Review: typeof _Review & {
  book: $$MapWrap<typeof Book, typeof Review$book>,
  user: $$MapWrap<typeof User, typeof Review$user>,
} = {
  ..._Review,
  book: $$mapWrap(() => Book, Review$book),
  user: $$mapWrap(() => User, Review$user),
};

const _User = {
  id: User$id,
  name: User$name,
};

export const User: typeof _User & {
  author: $$MapWrap<typeof Author, typeof User$author>,
  reviews: $$MapWrap<typeof Review, typeof User$reviews>,
} = {
  ..._User,
  author: $$mapWrap(() => Author, User$author),
  reviews: $$mapWrap(() => Review, User$reviews),
};

interface $Author$id { id: ID; }
interface $Author$name { name: String; }
interface $Author$rating { rating: StarRating; }
interface $Author$books<F extends Author$> { books: _$Book<Extract<F, $<typeof Author$books, Book$>>[\\"l\\"]>[]; }
interface $Author$favoriteBook<F extends Author$> { favoriteBook: _$Book<Extract<F, $<typeof Author$favoriteBook, Book$>>[\\"l\\"]>; }

type _$Author<F extends Author$> =
  & (typeof Author$id extends F ? $Author$id : {})
  & (typeof Author$name extends F ? $Author$name : {})
  & (typeof Author$rating extends F ? $Author$rating : {})
  & ($<typeof Author$books, any> extends F ? $Author$books<F> : {})
  & ($<typeof Author$favoriteBook, any> extends F ? $Author$favoriteBook<F> : {})
export type $Author<F extends $$DeepArray<Author$>> = _$Author<$$UnwrapDeepArray<F[number]>>;

interface $Book$categories { categories: Category[]; }
interface $Book$description { description: String; }
interface $Book$id { id: ID; }
interface $Book$rating { rating: StarRating; }
interface $Book$title { title: String; }
interface $Book$author<F extends Book$> { author: _$Author<Extract<F, $<typeof Book$author, Author$>>[\\"l\\"]>; }
interface $Book$reviews<F extends Book$> { reviews: _$Review<Extract<F, $<typeof Book$reviews, Review$>>[\\"l\\"]>[]; }

type _$Book<F extends Book$> =
  & (typeof Book$categories extends F ? $Book$categories : {})
  & (typeof Book$description extends F ? $Book$description : {})
  & (typeof Book$id extends F ? $Book$id : {})
  & (typeof Book$rating extends F ? $Book$rating : {})
  & (typeof Book$title extends F ? $Book$title : {})
  & ($<typeof Book$author, any> extends F ? $Book$author<F> : {})
  & ($<typeof Book$reviews, any> extends F ? $Book$reviews<F> : {})
export type $Book<F extends $$DeepArray<Book$>> = _$Book<$$UnwrapDeepArray<F[number]>>;

interface $Review$details { details: (String | null); }
interface $Review$id { id: ID; }
interface $Review$rating { rating: StarRating; }
interface $Review$title { title: (String | null); }
interface $Review$book<F extends Review$> { book: _$Book<Extract<F, $<typeof Review$book, Book$>>[\\"l\\"]>; }
interface $Review$user<F extends Review$> { user: _$User<Extract<F, $<typeof Review$user, User$>>[\\"l\\"]>; }

type _$Review<F extends Review$> =
  & (typeof Review$details extends F ? $Review$details : {})
  & (typeof Review$id extends F ? $Review$id : {})
  & (typeof Review$rating extends F ? $Review$rating : {})
  & (typeof Review$title extends F ? $Review$title : {})
  & ($<typeof Review$book, any> extends F ? $Review$book<F> : {})
  & ($<typeof Review$user, any> extends F ? $Review$user<F> : {})
export type $Review<F extends $$DeepArray<Review$>> = _$Review<$$UnwrapDeepArray<F[number]>>;

interface $User$id { id: ID; }
interface $User$name { name: String; }
interface $User$author<F extends User$> { author: (_$Author<Extract<F, $<typeof User$author, Author$>>[\\"l\\"]> | null); }
interface $User$reviews<F extends User$> { reviews: _$Review<Extract<F, $<typeof User$reviews, Review$>>[\\"l\\"]>[]; }

type _$User<F extends User$> =
  & (typeof User$id extends F ? $User$id : {})
  & (typeof User$name extends F ? $User$name : {})
  & ($<typeof User$author, any> extends F ? $User$author<F> : {})
  & ($<typeof User$reviews, any> extends F ? $User$reviews<F> : {})
export type $User<F extends $$DeepArray<User$>> = _$User<$$UnwrapDeepArray<F[number]>>;

class Query$getAuthor {
  private static _: any;
  static typeProp = \\"query\\";
  static type = \\"Query\\";
  static prop = \\"getAuthor\\";
  static inputTypes = {
    id: \\"ID!\\",
  };
}

class Query$getBook {
  private static _: any;
  static typeProp = \\"query\\";
  static type = \\"Query\\";
  static prop = \\"getBook\\";
  static inputTypes = {
    id: \\"ID!\\",
  };
}

class Query$listBooks {
  private static _: any;
  static typeProp = \\"query\\";
  static type = \\"Query\\";
  static prop = \\"listBooks\\";
  static inputTypes = {
    cursor: \\"Cursor\\",
    filter: \\"BookFilter\\",
  };
}

class Mutation$addReview {
  private static _: any;
  static typeProp = \\"mutation\\";
  static type = \\"Mutation\\";
  static prop = \\"addReview\\";
  static inputTypes = {
    input: \\"ReviewInput!\\",
  };
}

export namespace $$Input {
  export namespace Query {
    export interface getAuthor {
      id: ID;
    }
    export interface getBook {
      id: ID;
    }
    export interface listBooks {
      cursor?: (Cursor | null | void);
      filter?: (BookFilter | null | void);
    }
  }
  export namespace Mutation {
    export interface addReview {
      input: ReviewInput;
    }
  }

  export type $<T> =
    T extends typeof Query$getAuthor ? Query.getAuthor : $$1<T>;
  type $$1<T> =
    T extends typeof Query$getBook ? Query.getBook : $$2<T>;
  type $$2<T> =
    T extends typeof Query$listBooks ? Query.listBooks : $$3<T>;
  type $$3<T> =
    T extends typeof Mutation$addReview ? Mutation.addReview : never;
}

export namespace $$Frag {
  export namespace Query {
    export type getAuthor = $$DeepArray<Author$>;
    export type getBook = $$DeepArray<Book$>;
    export type listBooks = $$DeepArray<Book$>;
  }
  export namespace Mutation {
    export type addReview = $$DeepArray<Review$>;
  }

  export type $<T> =
    T extends typeof Query$getAuthor ? Query.getAuthor : $$1<T>;
  type $$1<T> =
    T extends typeof Query$getBook ? Query.getBook : $$2<T>;
  type $$2<T> =
    T extends typeof Query$listBooks ? Query.listBooks : $$3<T>;
  type $$3<T> =
    T extends typeof Mutation$addReview ? Mutation.addReview : never;
}

export namespace $$Output {
  export namespace Query {
    export type getAuthor<F extends $$Frag.$<typeof Query$getAuthor>[]> = $Author<F>
    export type getBook<F extends $$Frag.$<typeof Query$getBook>[]> = $Book<F>
    export type listBooks<F extends $$Frag.$<typeof Query$listBooks>[]> = $Book<F>[]
  }
  export namespace Mutation {
    export type addReview<F extends $$Frag.$<typeof Mutation$addReview>[]> = $Review<F>
  }

  export type $<T, F extends $$Frag.$<T>[]> =
    T extends typeof Query$getAuthor ? F extends $$Frag.$<typeof Query$getAuthor>[] ? Query.getAuthor<F> : $$1<T, F> : $$1<T, F>;
  type $$1<T, F extends $$Frag.$<T>[]> =
    T extends typeof Query$getBook ? F extends $$Frag.$<typeof Query$getBook>[] ? Query.getBook<F> : $$2<T, F> : $$2<T, F>;
  type $$2<T, F extends $$Frag.$<T>[]> =
    T extends typeof Query$listBooks ? F extends $$Frag.$<typeof Query$listBooks>[] ? Query.listBooks<F> : $$3<T, F> : $$3<T, F>;
  type $$3<T, F extends $$Frag.$<T>[]> =
    T extends typeof Mutation$addReview ? F extends $$Frag.$<typeof Mutation$addReview>[] ? Mutation.addReview<F> : never : never;
}

export const $$generateObject = <F extends $$GqxFunc>(f: $$GqxImpl<F>) => ({
  query: {
    getAuthor: f(Query$getAuthor),
    getBook: f(Query$getBook),
    listBooks: f(Query$listBooks),
  },
  mutation: {
    addReview: f(Mutation$addReview),
  },
})

export namespace $$Directives {
  export namespace Query {
    export type getAuthor = {}
    export type getBook = {}
    export type listBooks = {}
  }
  export namespace Mutation {
    export type addReview = {
      auth: {
        test: {
          title: \\"hi\\",
        },
        test2: [
          \\"hi\\",
          \\"hi2\\",
        ],
      },
    }
  }
  export namespace Book {
    export type id = {}
    export type author = {}
    export type title = {}
    export type description = {}
    export type categories = {}
    export type reviews = {}
    export type rating = {}
  }
  export namespace Author {
    export type id = {}
    export type name = {}
    export type books = {}
    export type favoriteBook = {}
    export type rating = {}
  }
  export namespace Review {
    export type id = {}
    export type rating = {}
    export type book = {}
    export type user = {}
    export type title = {}
    export type details = {}
  }
  export namespace User {
    export type id = {}
    export type author = {}
    export type name = {}
    export type reviews = {}
  }
  export type $<T> =
    T extends Query$getAuthor ? Query.getAuthor :
    T extends Query$getBook ? Query.getBook :
    T extends Query$listBooks ? Query.listBooks :
    T extends Mutation$addReview ? Mutation.addReview :
    T extends Book$id ? Book.id :
    T extends Book$author ? Book.author :
    T extends Book$title ? Book.title :
    T extends Book$description ? Book.description :
    T extends Book$categories ? Book.categories :
    T extends Book$reviews ? Book.reviews :
    T extends Book$rating ? Book.rating :
    T extends Author$id ? Author.id :
    T extends Author$name ? Author.name :
    T extends Author$books ? Author.books :
    T extends Author$favoriteBook ? Author.favoriteBook :
    T extends Author$rating ? Author.rating :
    T extends Review$id ? Review.id :
    T extends Review$rating ? Review.rating :
    T extends Review$book ? Review.book :
    T extends Review$user ? Review.user :
    T extends Review$title ? Review.title :
    T extends Review$details ? Review.details :
    T extends User$id ? User.id :
    T extends User$author ? User.author :
    T extends User$name ? User.name :
    T extends User$reviews ? User.reviews :
    never
}"
`;
