// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"/* eslint-disable */

import { $$Scalars } from \\"./scalars\\";

export interface $<F, L> { readonly f: F; readonly l: L }
export const $ = <F, L>(f: F, l: L) => ({ f, l });

export interface $$HKT<I = unknown> {
  input: I;
  return: unknown;
}

export type $$CallHKT<HKT extends $$HKT, I extends HKT[\\"input\\"]> = (HKT & { input: I })[\\"return\\"];

interface DeepFragRecurseGuard<F, Lo> extends $<F, Values<Lo>> { readonly l: Values<Lo> }

export type $$Type = $$EnumType | $$ScalarType | $$ObjectType;
export type $$EnumType = keyof $$EnumTypes;
export type $$ScalarType = keyof $$Scalars;

export type $$AnyFrag = $$ObjectTypeInfoMap[$$ObjectType][\\"Frag\\"];
export type $$AnyProp = $$ObjectTypeInfoMap[$$ObjectType][\\"Prop\\"];

export type $$Input<T extends $$AnyProp> = $$PropToInputType[T];

type _$$Frag<T extends $$Type> = T extends $$ObjectType ? $$ObjectTypeInfoMap[T][\\"Frag\\"] : never;
export type $$Frag<T extends $$AnyProp> = $$DeepArray<_$$Frag<$$PropToOutput[T]>>;

type _$$Output<T extends $$Type, F extends _$$Frag<T>> =
  T extends $$ObjectType ?
    $$Result<T, F> :
    T extends $$ScalarType ?
      $$Scalars[T] :
      T extends $$EnumType ?
        $$EnumTypes[T] :
        never
export type $$Output<T extends $$AnyProp, F extends $$Frag<T>> =
  $$CallHKT<$$PropToWrap[T], _$$Output<$$PropToOutput[T], $$UnwrapDeepArray<F, _$$Frag<$$PropToOutput[T]>>>>;

export type $$ObjectTypeInfoMap = typeof $$objectTypeInfoMap;

type __$$DeepFrag<O extends _$$ObjectTypeInfo, F extends O[\\"DeepProp\\"]> =
  _$$DeepFrag<O> & { $$shallow: O[\\"ShallowFrag\\"] }

type _$$DeepFrag<O extends _$$ObjectTypeInfo> =
  { [F in O[\\"DeepProp\\"]]: DeepFragRecurseGuard<F, __$$DeepFrag<$$ObjectTypeInfoMap[O[\\"DeepType\\"][F]], F>> }

type Values<T> = T[keyof T];

export type $$InflateObjectType<O extends _$$ObjectTypeInfo, HKT extends $$HKT<O[\\"Prop\\"]>> = {
  [K in O[\\"Name\\"]]: $$CallHKT<O[\\"Wrap\\"][O[\\"NameProp\\"][K]], $$CallHKT<HKT, O[\\"NameProp\\"][K]>>
}

type ___$$Result<O extends _$$ObjectTypeInfo, F extends O[\\"Frag\\"], P extends O[\\"Prop\\"], T extends $$Type> =
  T extends $$ScalarType ?
  $$Scalars[T] :
  T extends $$EnumType ?
  $$EnumTypes[T] :
  T extends $$ObjectType ?
  $$Result<T, Extract<F, $<P, any>>[\\"l\\"]> :
  never

// eslint-disable-next-line @typescript-eslint/class-name-casing
interface __$$Result<O extends _$$ObjectTypeInfo, F extends O[\\"Frag\\"]> extends $$HKT<O[\\"Prop\\"]> {
  return: ___$$Result<O, F, this[\\"input\\"], O[\\"Type\\"][this[\\"input\\"]]>;
}

type _$$Result<O extends _$$ObjectTypeInfo, F extends O[\\"Frag\\"]> = (
  Pick<$$InflateObjectType<O, __$$Result<O, F>>, O[\\"PropName\\"][Extract<F, string> | Extract<F, { f: string }>[\\"f\\"]]>
)

export type $$Result<O extends $$ObjectType, F extends $$ObjectTypeInfoMap[O][\\"Frag\\"]> =
  $$Expand<_$$Result<$$ObjectTypeInfoMap[O], F>>

export type $$Expand<T> = T extends infer O ? { [K in keyof O]: O[K] } : never;

export type _$$ObjectTypeInfo = $$ObjectTypeInfo<any, any, any, any, any, any, any, any, any, any, any>;

export type $$PropToInputType = {
  [K in keyof $$PropToInfo]: $$PropToInfo[K][\\"InputTypes\\"][Extract<K, keyof $$PropToInfo[K][\\"InputTypes\\"]>];
}

export type $$PropToWrap = {
  [K in keyof $$PropToInfo]: $$PropToInfo[K][\\"Wrap\\"][Extract<K, keyof $$PropToInfo[K][\\"Wrap\\"]>];
}

export type $$PropToOutput = {
  [K in keyof $$PropToInfo]: $$PropToInfo[K][\\"Type\\"][Extract<K, keyof $$PropToInfo[K][\\"Type\\"]>];
}

export type $$PropToInfo = {
  [K in keyof $$PropToType]: $$ObjectTypeInfoMap[$$PropToType[K]]
}

export type $$PropToType = {
  [K in $$ObjectType]: (contravariant: Record<$$ObjectTypeInfoMap[K][\\"Prop\\"], K>) => void
}[$$ObjectType] extends (contravariant: infer T) => void ? T : void;

export class $$ObjectTypeInfo<
  ShallowPropName extends Record<string, keyof ShallowNameProp>,
  ShallowNameProp extends Record<string, keyof ShallowPropName>,
  ShallowType extends Record<keyof ShallowPropName, $$ScalarType | $$EnumType>,
  ShallowWrap extends Record<keyof ShallowPropName, $$HKT>,
  DeepPropName extends Record<string, keyof DeepNameProp>,
  DeepNameProp extends Record<string, keyof DeepPropName>,
  DeepType extends Record<keyof DeepPropName, $$ObjectType>,
  DeepWrap extends Record<keyof DeepPropName, $$HKT>,
  InputTypes extends Record<keyof ShallowPropName | keyof DeepPropName, {}>,
  Directives extends Record<keyof ShallowPropName | keyof DeepPropName, Record<string, {}>>,
  SourceFiles extends Record<keyof ShallowPropName | keyof DeepPropName, string>,
> {

  declare ShallowProp: keyof ShallowPropName;
  declare ShallowName: keyof ShallowNameProp;
  declare ShallowPropName: ShallowPropName;
  declare ShallowNameProp: ShallowNameProp;
  declare ShallowType: ShallowType;
  declare ShallowWrap: ShallowWrap;
  declare DeepProp: keyof DeepPropName;
  declare DeepName: keyof DeepNameProp;
  declare DeepPropName: DeepPropName;
  declare DeepNameProp: DeepNameProp;
  declare DeepType: DeepType;
  declare DeepWrap: DeepWrap;
  declare InputTypes: InputTypes;
  declare Directives: Directives;
  declare SourceFiles: SourceFiles;

  declare ShallowFrag: this[\\"ShallowProp\\"];
  declare DeepFrag: Values<_$$DeepFrag<this>>;
  declare PropName: ShallowPropName & DeepPropName;
  declare NameProp: ShallowNameProp & DeepNameProp;
  declare Wrap: ShallowWrap & DeepWrap;
  declare Type: DeepType & ShallowType;
  declare Prop: this[\\"ShallowProp\\"] | this[\\"DeepProp\\"];
  declare Name: this[\\"ShallowName\\"] | this[\\"DeepName\\"];
  declare Frag: this[\\"ShallowFrag\\"] | this[\\"DeepFrag\\"];

  constructor(
    public shallowPropToName: ShallowPropName,
    public shallowNameToProp: ShallowNameProp,
    _0: ShallowType,
    _1: ShallowWrap,
    public deepPropToName: DeepPropName,
    public deepNameToProp: DeepNameProp,
    _2: DeepType,
    _3: DeepWrap,
    _4: InputTypes,
    public inputTypeStrings: Record<keyof ShallowPropName | keyof DeepPropName, any>,
    public directives: Directives,
    public sourceFiles: SourceFiles,
  ){

  }

}

export interface $$Identity<I = unknown> extends $$HKT<I> {
  return: this[\\"input\\"];
}

export interface $$Optional<HKT extends $$HKT = $$Identity> extends $$HKT {
  return: $$CallHKT<HKT, this[\\"input\\"]> | null;
}

export interface $$Array<HKT extends $$HKT = $$Identity> extends $$HKT {
  return: $$CallHKT<HKT, this[\\"input\\"]>[];
}

export type $$DeepArray<T> = (T | $$DeepArray<T>)[];
export type $$UnwrapDeepArray<A extends $$DeepArray<T>, T = any> =
  Extract<A extends $$DeepArray<infer U> ? U : never, T>;

export type $$GqxReturn = $$HKT<$$AnyProp>;
type $$CallGqxReturn<R extends $$GqxReturn, I extends $$AnyProp> = $$CallHKT<R, I>;
export type $$GqxImpl<R extends $$GqxReturn> = <I extends $$AnyProp>(id: I) => $$CallGqxReturn<R, I>;

declare const __wrap__: unique symbol;

type $$Wrap<X, Y> = X extends $<infer F, infer L> ? $<F, $$Wrap<L, Y>> : never;
type $$MapWrap<O, F> = {
  [K in keyof O | typeof __wrap__ | \\"$\\"]:
  K extends \\"$\\" ?
  <T extends $$DeepArray<$$AnyFrag>>(...x: T) =>
    $<F, O extends { [__wrap__]: infer X } ? $$Wrap<X, $$UnwrapDeepArray<T>> : $$UnwrapDeepArray<T>>[] :
  K extends keyof O ?
  O[K] extends $$AnyFrag ?
  $<F, O[K]> :
  $$MapWrap<O[K], F> :
  $<F, null>
}

const $$mapWrap = <O, F>(o: () => O, f: F): $$MapWrap<O, F> =>
  // @ts-ignore
  new Proxy(Object.create(null), {
    get: (t, k: string) => t[k] || (t[k] =
      k !== \\"$\\" ?
        (o as any)()[k].$ ?
          $$mapWrap(() => (o as any)()[k], f) :
          $(f, (o as any)()[k]) :
        // @ts-ignore
        (...a: any) => (\\"$\\" in o() ? o().$(...a) : a).flat(Infinity).map((a: any) => $(f, a))
    ),
  })

export const $$reconstruct = <I extends $$AnyProp>(id: I, input: $$Input<I>, props: $$Frag<I>) => {
  interface Subs { [k: string]: true | Subs }
  const subs: Subs = {};
  populateSubs(props, subs);
  const frag = genFrag(subs);
  const inputKeys = Object.keys(input);
  const inputDef = inputKeys.length ? \`(\${inputKeys.map(k =>
    \`$\${k}: \${($$objectTypeInfoMap as any)[id.split(\\"$\\")[0]].inputTypeStrings[id][k]}\`
  ).join(\\", \\")})\` : \\"\\";
  const inputPass = inputKeys.length ? \`(\${inputKeys.map(k =>
    \`\${k}: $\${k}\`
  )})\` : \\"\\";
  const request = \`\${id.split(\\"$\\")[0].toLowerCase()}\${inputDef} { \${id.split(\\"$\\")[1]}\${inputPass}\${frag} }\`;
  return request;

  function genFrag(subs: Subs): string{
    return (
      Object.keys(subs).length ?
        \`{ \${Object.entries(subs).map(([k, v]) => v === true ? k : k + \\" \\" + genFrag(v)).join(\\" \\")} }\` :
        \\"\\"
    );
  }

  function populateSubs(prop: $$AnyFrag | $$DeepArray<$$AnyFrag>, subs: Subs | true): void{
    if(prop instanceof Array)
      prop.map(p => populateSubs(p, subs));
    else if(subs === true)
      return;
    else if(typeof prop === \\"string\\")
      subs[prop.split(\\"$\\")[1]] = true;
    else {
      const name = prop.f.split(\\"$\\")[1];
      populateSubs(prop.l, subs[name] = (subs[name] || {}));
    }
  }
}

export type Category = (
  | \\"BestSeller\\"
  | \\"Childrens\\"
  | \\"Dystopian\\"
  | \\"Fantasy\\"
  | \\"Fiction\\"
  | \\"Historical\\"
  | \\"Horror\\"
  | \\"Mystery\\"
  | \\"NonFiction\\"
  | \\"Religous\\"
  | \\"Romance\\"
  | \\"SciFi\\"
  | \\"Utopian\\"
)

export interface $$EnumTypes {
  Category: Category,
}

export interface Cursor {
  start: $$Scalars[\\"Int\\"],
  limit: $$Scalars[\\"Int\\"],
}

export interface BookFilter {
  title?: ($$Scalars[\\"String\\"] | null | undefined),
  author?: (AuthorFilter | null | undefined),
  categories?: (Category[] | null | undefined),
  rating: $$Scalars[\\"StarRating\\"],
}

export interface AuthorFilter {
  name?: ($$Scalars[\\"String\\"] | null | undefined),
  rating?: ($$Scalars[\\"StarRating\\"] | null | undefined),
}

export interface ReviewInput {
  rating: $$Scalars[\\"StarRating\\"],
  book: $$Scalars[\\"ID\\"],
  title?: ($$Scalars[\\"String\\"] | null | undefined),
  details?: ($$Scalars[\\"String\\"] | null | undefined),
}

export type $$ObjectType = (
  | \\"Author\\"
  | \\"Book\\"
  | \\"Mutation\\"
  | \\"Query\\"
  | \\"Review\\"
  | \\"User\\"
)

const $$objectTypeInfoMap = {
  Author: new $$ObjectTypeInfo(
    {
      Author$id: \\"id\\",
      Author$name: \\"name\\",
      Author$rating: \\"rating\\",
    },
    {
      id: \\"Author$id\\",
      name: \\"Author$name\\",
      rating: \\"Author$rating\\",
    },
    null as any as {
      Author$id: \\"ID\\",
      Author$name: \\"String\\",
      Author$rating: \\"StarRating\\",
    },
    null as any as {
      Author$id: $$Identity,
      Author$name: $$Identity,
      Author$rating: $$Identity,
    },
    {
      Author$books: \\"books\\",
      Author$favoriteBook: \\"favoriteBook\\",
    },
    {
      books: \\"Author$books\\",
      favoriteBook: \\"Author$favoriteBook\\",
    },
    null as any as {
      Author$books: \\"Book\\",
      Author$favoriteBook: \\"Book\\",
    },
    null as any as {
      Author$books: $$Array<$$Identity>,
      Author$favoriteBook: $$Identity,
    },
    null as any as {
      Author$books: {},
      Author$favoriteBook: {},
      Author$id: {},
      Author$name: {},
      Author$rating: {},
    },
    {
      Author$books: {},
      Author$favoriteBook: {},
      Author$id: {},
      Author$name: {},
      Author$rating: {},
    },
    {
      Author$books: {},
      Author$favoriteBook: {},
      Author$id: {},
      Author$name: {},
      Author$rating: {},
    },
    {
      Author$books: \\"extensive.gql\\",
      Author$favoriteBook: \\"extensive.gql\\",
      Author$id: \\"extensive.gql\\",
      Author$name: \\"extensive.gql\\",
      Author$rating: \\"extensive.gql\\",
    } as const,
  ),
  Book: new $$ObjectTypeInfo(
    {
      Book$categories: \\"categories\\",
      Book$description: \\"description\\",
      Book$id: \\"id\\",
      Book$rating: \\"rating\\",
      Book$title: \\"title\\",
    },
    {
      categories: \\"Book$categories\\",
      description: \\"Book$description\\",
      id: \\"Book$id\\",
      rating: \\"Book$rating\\",
      title: \\"Book$title\\",
    },
    null as any as {
      Book$categories: \\"Category\\",
      Book$description: \\"String\\",
      Book$id: \\"ID\\",
      Book$rating: \\"StarRating\\",
      Book$title: \\"String\\",
    },
    null as any as {
      Book$categories: $$Array<$$Identity>,
      Book$description: $$Identity,
      Book$id: $$Identity,
      Book$rating: $$Identity,
      Book$title: $$Identity,
    },
    {
      Book$author: \\"author\\",
      Book$reviews: \\"reviews\\",
    },
    {
      author: \\"Book$author\\",
      reviews: \\"Book$reviews\\",
    },
    null as any as {
      Book$author: \\"Author\\",
      Book$reviews: \\"Review\\",
    },
    null as any as {
      Book$author: $$Identity,
      Book$reviews: $$Array<$$Identity>,
    },
    null as any as {
      Book$author: {},
      Book$categories: {},
      Book$description: {},
      Book$id: {},
      Book$rating: {},
      Book$reviews: {},
      Book$title: {},
    },
    {
      Book$author: {},
      Book$categories: {},
      Book$description: {},
      Book$id: {},
      Book$rating: {},
      Book$reviews: {},
      Book$title: {},
    },
    {
      Book$author: {},
      Book$categories: {},
      Book$description: {},
      Book$id: {},
      Book$rating: {},
      Book$reviews: {},
      Book$title: {},
    },
    {
      Book$author: \\"extensive.gql\\",
      Book$categories: \\"extensive.gql\\",
      Book$description: \\"extensive.gql\\",
      Book$id: \\"extensive.gql\\",
      Book$rating: \\"extensive.gql\\",
      Book$reviews: \\"extensive.gql\\",
      Book$title: \\"extensive.gql\\",
    } as const,
  ),
  Mutation: new $$ObjectTypeInfo(
    {}, {}, {}, {},
    {
      Mutation$addReview: \\"addReview\\",
    },
    {
      addReview: \\"Mutation$addReview\\",
    },
    null as any as {
      Mutation$addReview: \\"Review\\",
    },
    null as any as {
      Mutation$addReview: $$Identity,
    },
    null as any as {
      Mutation$addReview: {
        input: ReviewInput,
      },
    },
    {
      Mutation$addReview: {
        input: \\"ReviewInput!\\",
      },
    },
    {
      Mutation$addReview: {
        auth: {
          test: {
            title: \\"hi\\",
          },
          test2: [
            \\"hi\\",
            \\"hi2\\",
          ],
        },
      },
    },
    {
      Mutation$addReview: \\"extensive.gql\\",
    } as const,
  ),
  Query: new $$ObjectTypeInfo(
    {}, {}, {}, {},
    {
      Query$getAuthor: \\"getAuthor\\",
      Query$getBook: \\"getBook\\",
      Query$listBooks: \\"listBooks\\",
    },
    {
      getAuthor: \\"Query$getAuthor\\",
      getBook: \\"Query$getBook\\",
      listBooks: \\"Query$listBooks\\",
    },
    null as any as {
      Query$getAuthor: \\"Author\\",
      Query$getBook: \\"Book\\",
      Query$listBooks: \\"Book\\",
    },
    null as any as {
      Query$getAuthor: $$Identity,
      Query$getBook: $$Identity,
      Query$listBooks: $$Array<$$Identity>,
    },
    null as any as {
      Query$getAuthor: {
        id: $$Scalars[\\"ID\\"],
      },
      Query$getBook: {
        id: $$Scalars[\\"ID\\"],
      },
      Query$listBooks: {
        cursor?: (Cursor | null | undefined),
        filter?: (BookFilter | null | undefined),
      },
    },
    {
      Query$getAuthor: {
        id: \\"ID!\\",
      },
      Query$getBook: {
        id: \\"ID!\\",
      },
      Query$listBooks: {
        cursor: \\"Cursor\\",
        filter: \\"BookFilter\\",
      },
    },
    {
      Query$getAuthor: {},
      Query$getBook: {},
      Query$listBooks: {},
    },
    {
      Query$getAuthor: \\"extensive.gql\\",
      Query$getBook: \\"extensive.gql\\",
      Query$listBooks: \\"extensive.gql\\",
    } as const,
  ),
  Review: new $$ObjectTypeInfo(
    {
      Review$details: \\"details\\",
      Review$id: \\"id\\",
      Review$rating: \\"rating\\",
      Review$title: \\"title\\",
    },
    {
      details: \\"Review$details\\",
      id: \\"Review$id\\",
      rating: \\"Review$rating\\",
      title: \\"Review$title\\",
    },
    null as any as {
      Review$details: \\"String\\",
      Review$id: \\"ID\\",
      Review$rating: \\"StarRating\\",
      Review$title: \\"String\\",
    },
    null as any as {
      Review$details: $$Optional<$$Identity>,
      Review$id: $$Identity,
      Review$rating: $$Identity,
      Review$title: $$Optional<$$Identity>,
    },
    {
      Review$book: \\"book\\",
      Review$user: \\"user\\",
    },
    {
      book: \\"Review$book\\",
      user: \\"Review$user\\",
    },
    null as any as {
      Review$book: \\"Book\\",
      Review$user: \\"User\\",
    },
    null as any as {
      Review$book: $$Identity,
      Review$user: $$Identity,
    },
    null as any as {
      Review$book: {},
      Review$details: {},
      Review$id: {},
      Review$rating: {},
      Review$title: {},
      Review$user: {},
    },
    {
      Review$book: {},
      Review$details: {},
      Review$id: {},
      Review$rating: {},
      Review$title: {},
      Review$user: {},
    },
    {
      Review$book: {},
      Review$details: {},
      Review$id: {},
      Review$rating: {},
      Review$title: {},
      Review$user: {},
    },
    {
      Review$book: \\"extensive.gql\\",
      Review$details: \\"extensive.gql\\",
      Review$id: \\"extensive.gql\\",
      Review$rating: \\"extensive.gql\\",
      Review$title: \\"extensive.gql\\",
      Review$user: \\"extensive.gql\\",
    } as const,
  ),
  User: new $$ObjectTypeInfo(
    {
      User$id: \\"id\\",
      User$name: \\"name\\",
    },
    {
      id: \\"User$id\\",
      name: \\"User$name\\",
    },
    null as any as {
      User$id: \\"ID\\",
      User$name: \\"String\\",
    },
    null as any as {
      User$id: $$Identity,
      User$name: $$Identity,
    },
    {
      User$author: \\"author\\",
      User$reviews: \\"reviews\\",
    },
    {
      author: \\"User$author\\",
      reviews: \\"User$reviews\\",
    },
    null as any as {
      User$author: \\"Author\\",
      User$reviews: \\"Review\\",
    },
    null as any as {
      User$author: $$Optional<$$Identity>,
      User$reviews: $$Array<$$Identity>,
    },
    null as any as {
      User$author: {},
      User$id: {},
      User$name: {},
      User$reviews: {},
    },
    {
      User$author: {},
      User$id: {},
      User$name: {},
      User$reviews: {},
    },
    {
      User$author: {},
      User$id: {},
      User$name: {},
      User$reviews: {},
    },
    {
      User$author: \\"extensive.gql\\",
      User$id: \\"extensive.gql\\",
      User$name: \\"extensive.gql\\",
      User$reviews: \\"extensive.gql\\",
    } as const,
  ),
}

export type Author$ = $$ObjectTypeInfoMap[\\"Author\\"][\\"Frag\\"];
export type Book$ = $$ObjectTypeInfoMap[\\"Book\\"][\\"Frag\\"];
export type Mutation$ = $$ObjectTypeInfoMap[\\"Mutation\\"][\\"Frag\\"];
export type Query$ = $$ObjectTypeInfoMap[\\"Query\\"][\\"Frag\\"];
export type Review$ = $$ObjectTypeInfoMap[\\"Review\\"][\\"Frag\\"];
export type User$ = $$ObjectTypeInfoMap[\\"User\\"][\\"Frag\\"];

const Author$$ = <F extends $$DeepArray<Author$>>(...frag: F): F[number][] => frag;

const _Author = {
  $: Author$$,
  id: \\"Author$id\\",
  name: \\"Author$name\\",
  rating: \\"Author$rating\\",
} as const;

export const Author: typeof _Author & {
  books: $$MapWrap<typeof$Book, \\"Author$books\\">,
  favoriteBook: $$MapWrap<typeof$Book, \\"Author$favoriteBook\\">,
} = {
  ..._Author,
  books: $$mapWrap(() => Book, \\"Author$books\\"),
  favoriteBook: $$mapWrap(() => Book, \\"Author$favoriteBook\\"),
};

type typeof$Author = typeof Author

const Book$$ = <F extends $$DeepArray<Book$>>(...frag: F): F[number][] => frag;

const _Book = {
  $: Book$$,
  categories: \\"Book$categories\\",
  description: \\"Book$description\\",
  id: \\"Book$id\\",
  rating: \\"Book$rating\\",
  title: \\"Book$title\\",
} as const;

export const Book: typeof _Book & {
  author: $$MapWrap<typeof$Author, \\"Book$author\\">,
  reviews: $$MapWrap<typeof$Review, \\"Book$reviews\\">,
} = {
  ..._Book,
  author: $$mapWrap(() => Author, \\"Book$author\\"),
  reviews: $$mapWrap(() => Review, \\"Book$reviews\\"),
};

type typeof$Book = typeof Book

const Mutation$$ = <F extends $$DeepArray<Mutation$>>(...frag: F): F[number][] => frag;

export const Mutation: {
  $: typeof Mutation$$,
  addReview: $$MapWrap<typeof$Review, \\"Mutation$addReview\\">,
} = {
  $: Mutation$$,
  addReview: $$mapWrap(() => Review, \\"Mutation$addReview\\"),
};

type typeof$Mutation = typeof Mutation

const Query$$ = <F extends $$DeepArray<Query$>>(...frag: F): F[number][] => frag;

export const Query: {
  $: typeof Query$$,
  getAuthor: $$MapWrap<typeof$Author, \\"Query$getAuthor\\">,
  getBook: $$MapWrap<typeof$Book, \\"Query$getBook\\">,
  listBooks: $$MapWrap<typeof$Book, \\"Query$listBooks\\">,
} = {
  $: Query$$,
  getAuthor: $$mapWrap(() => Author, \\"Query$getAuthor\\"),
  getBook: $$mapWrap(() => Book, \\"Query$getBook\\"),
  listBooks: $$mapWrap(() => Book, \\"Query$listBooks\\"),
};

type typeof$Query = typeof Query

const Review$$ = <F extends $$DeepArray<Review$>>(...frag: F): F[number][] => frag;

const _Review = {
  $: Review$$,
  details: \\"Review$details\\",
  id: \\"Review$id\\",
  rating: \\"Review$rating\\",
  title: \\"Review$title\\",
} as const;

export const Review: typeof _Review & {
  book: $$MapWrap<typeof$Book, \\"Review$book\\">,
  user: $$MapWrap<typeof$User, \\"Review$user\\">,
} = {
  ..._Review,
  book: $$mapWrap(() => Book, \\"Review$book\\"),
  user: $$mapWrap(() => User, \\"Review$user\\"),
};

type typeof$Review = typeof Review

const User$$ = <F extends $$DeepArray<User$>>(...frag: F): F[number][] => frag;

const _User = {
  $: User$$,
  id: \\"User$id\\",
  name: \\"User$name\\",
} as const;

export const User: typeof _User & {
  author: $$MapWrap<typeof$Author, \\"User$author\\">,
  reviews: $$MapWrap<typeof$Review, \\"User$reviews\\">,
} = {
  ..._User,
  author: $$mapWrap(() => Author, \\"User$author\\"),
  reviews: $$mapWrap(() => Review, \\"User$reviews\\"),
};

type typeof$User = typeof User

export type $Author<F extends $$DeepArray<Author$>> = $$Result<\\"Author\\", $$UnwrapDeepArray<F>>
export type $Book<F extends $$DeepArray<Book$>> = $$Result<\\"Book\\", $$UnwrapDeepArray<F>>
export type $Mutation<F extends $$DeepArray<Mutation$>> = $$Result<\\"Mutation\\", $$UnwrapDeepArray<F>>
export type $Query<F extends $$DeepArray<Query$>> = $$Result<\\"Query\\", $$UnwrapDeepArray<F>>
export type $Review<F extends $$DeepArray<Review$>> = $$Result<\\"Review\\", $$UnwrapDeepArray<F>>
export type $User<F extends $$DeepArray<User$>> = $$Result<\\"User\\", $$UnwrapDeepArray<F>>

export const $$generateObject = <R extends $$GqxReturn>(f: $$GqxImpl<R>) => ({
  query: {
    getAuthor: f(\\"Query$getAuthor\\"),
    getBook: f(\\"Query$getBook\\"),
    listBooks: f(\\"Query$listBooks\\"),
  },
  mutation: {
    addReview: f(\\"Mutation$addReview\\"),
  },
})

export type $$TypeDirectives = typeof $$typeDirectives;
export const $$typeDirectives = {
  Query: {},
  Mutation: {},
  Book: {
    auth: {
      test: {
        title: \\"stuffs\\",
      },
      test2: [
        \\"bye1\\",
        \\"bye2\\",
      ],
    },
  },
  Author: {},
  Category: {},
  Review: {},
  User: {},
  StarRating: {},
}

"
`;
