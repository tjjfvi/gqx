
directive @auth(test: BookFilter, test2: [String!]) on FIELD_DEFINITION | OBJECT

schema {
  query: Query
  mutation: Mutation
}

type Query {
  getAuthor(id: ID!): Author!
  getBook(id: ID!): Book!
  listBooks(cursor: Cursor, filter: BookFilter): [Book!]!
}

type Mutation {
  addReview(input: ReviewInput!): Review! @auth(test: {title:"hi"},test2:["hi","hi2"])
}

input Cursor {
  start: Int!
  limit: Int!
}

type Book @auth(test: {title:"stuffs"},test2:["bye1","bye2"]) {
  id: ID!
  author: Author!
  title: String!
  description: String!
  categories: [Category!]!
  reviews: [Review!]!
}

input BookFilter {
  title: String
  author: AuthorFilter
  categories: [Category!]
}

type Author {
  id: ID!
  name: String!
  books: [Book!]!
  favoriteBook: Book!
}

input AuthorFilter {
  name: String
}

enum Category @auth {
  Horror
  SciFi
  Fiction
  Fantasy
  NonFiction
  Romance
  Historical
  Mystery
  Childrens
  Dystopian
  Utopian
  Religous
}

type Review {
  id: ID!
  rating: StarRating!
  book: Book!
  user: User!
  title: String
  details: String
}

type User {
  id: ID!
  author: Author
  name: String!
  reviews: [Review!]!
}

input ReviewInput {
  rating: StarRating!
  book: ID!
  title: String
  details: String
}

extend input AuthorFilter {
  rating: StarRating
}

extend type Author {
  rating: StarRating!
}

extend type Book {
  rating: StarRating!
}

extend input BookFilter {
  rating: StarRating!
}

extend enum Category {
  BestSeller
}

scalar StarRating