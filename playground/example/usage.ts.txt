// @ts-nocheck
// -----

// Example Typescript Usage File

// Below are examples of a user-created Typescript code that uses the type information generated by gqx

// You can edit this TypeScript file.


import { gqx, Book, Person, Author, User } from "./gqx";

const authorFrag = Author.$(
  Author.id,
  Author.name,
);

const bookBasicFrag = Book.$(
  Book.id,
  Book.title,
  Book.author.name,
);

const bookAuthorFrag = Book.$(
  Book.id,
  Book.author.$(authorFrag)
);

const bookQueryFrag = Book.$(
  bookBasicFrag,
  bookAuthorFrag,
);

// Hover over bookResult to see the type from getBook and bookFrag
const bookResult = await gqx.query.getBook({ id: "abc" }, bookQueryFrag)
/* {
  __typename: "Book";
  id: string;
  title: string;
  author: {
    __typename: "Author";
    id: string;
    name: string;
  };
} */
bookResult.author.name // string


// Since Author implements Person
const peopleQueryFrag  = Person.$(
  Person.name,
  Author.books.id,
  User.username,
)

// Hover over personResult to see the type from getPeople and peopleFrag
const peopleResult = await gqx.query.getPeople({ id: "foo" }, peopleQueryFrag)
/* Array< {
      __typename: "Author";
      name: string;
      books: {
          __typename: "Book";
          id: string;
      }[];
  } | {
      __typename: "User";
      name: string;
  } > */

for(const person of peopleResult) {
  switch(person.__typename) {
    case "Author":
      person.books[0].id // string
      continue;
    case "User":
      person.username // string
      continue;
  }
}
